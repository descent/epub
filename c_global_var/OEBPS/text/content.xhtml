<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" href="../styles/dotepub.css" type="text/css" />
  <title>Dotepub.com</title>
</head>

<body>
	<div class=""><p><strong>（感謝網友&nbsp;</strong><strong>@我的上鋪叫路遙</strong><strong>&nbsp;投稿）</strong></p><p>作為一名程序員，如果說沉迷一門編程語言算作一種樂趣的話，那麼與此同時反過來去黑一門編程語言就是這種樂趣的昇華。今天我們就來黑一把C語言，好好展示一下這門經典語言令人抓狂的一面。</p><p>我們知道，全局變量是C語言語法和語義中一個很重要的知識點，首先它的存在意義需要從三個不同角度去理解：對於程序員來說，它是一個記錄內容的<strong>變量(variable)</strong>；對於編譯/鏈接器來說，它是一個需要解析的<strong>符號(symbol)</strong>；對於計算機來說，它可能是具有地址的一塊<strong>內存(memory)</strong>。其次是語法/語義：從作用域上看，帶static關鍵字的全局變量範圍只能限定在文件裡，否則會外聯到整個模塊和項目中；從生存期來看，它是靜態的，貫穿整個程序或模塊運行期間（<span><strong>注意，正是跨單元訪問和持續生存週期這兩個特點使得全局變量往往成為一段受攻擊代碼的突破口，瞭解這一點十分重要</strong></span>）；從空間分配上看，定義且初始化的全局變量在編譯時在數據段(.data)分配空間，定義但未初始化的全局變量<strong>暫存(tentative definition)</strong>在.bss段，編譯時自動清零，而僅僅是聲明的全局變量只能算個符號，寄存在編譯器的符號表內，不會分配空間，直到鏈接或者運行時再重定向到相應的地址上。</p><p>我們將向您展現一下，<strong>非static限定全局變量</strong>在編譯/鏈接以及程序運行時會發生哪些有趣的事情，順便可以對C編譯器/鏈接器的解析原理管中窺豹。以下示例對ANSI C和GNU C標準都有效，筆者的編譯環境是Ubuntu下的GCC-4.4.3。</p>

        <h4>第一個例子</h4> 
<div><div id="highlighter_25645" class="syntaxhighlighter cpp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p></td><td class="code"><div class="container"><p><code class="cpp preprocessor">#ifndef _H_</code></p><p><code class="cpp preprocessor">#define _H_</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">a;</code></p><p><code class="cpp preprocessor">#endif</code></p><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp preprocessor">#include "t.h"</code></p><p><code class="cpp keyword bold">struct</code> <code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">char</code> <code class="cpp plain">a;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp plain">} b = { 2, 4 };</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main();</code></p><p><code class="cpp keyword bold">void</code> <code class="cpp plain">foo()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("foo:\t(&amp;a)=0x%08x\n\t(&amp;b)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tsizeof(b)=%d\n\tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;a, &amp;b, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b.a, b.b, main);</code></p><p><code class="cpp plain">}</code></p><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp preprocessor">#include "t.h"</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">c;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">foo();</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("main:\t(&amp;a)=0x%08x\n\t(&amp;b)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\t(&amp;c)=0x%08x\n\tsize(b)=%d\n\tb=%d\n\tc=%d\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;a, &amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></p><p><code class="cpp plain">}</code></p></div></td></tr></tbody></table></div></div>
<p>Makefile如下：</p><div><div id="highlighter_578862" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p></td><td class="code"><div class="container"><p><code class="bash functions">test</code><code class="bash plain">: main.o foo.o</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">gcc -o </code><code class="bash functions">test</code> <code class="bash plain">main.o foo.o</code></p><p><code class="bash plain">main.o: main.c</code></p><p><code class="bash plain">foo.o: foo.c</code></p><p><code class="bash plain">clean:</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash functions">rm</code> <code class="bash plain">*.o </code><code class="bash functions">test</code></p></div></td></tr></tbody></table></div></div>
<p>運行情況：</p><div><div id="highlighter_707139" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p></td><td class="code"><div class="container"><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;a)=0x0804a024</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b)=0x0804a014</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x080483e4</code></p><p><code class="bash plain">main:&nbsp;&nbsp; (&amp;a)=0x0804a024</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b)=0x0804a014</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a028</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">size(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p></div></td></tr></tbody></table></div></div><p>這個項目裡我們定義了四個全局變量，t.h頭文件定義了一個整型a，main.c裡定義了兩個整型b和c並且未初始化，foo.c裡定義了一個初始化了的結構體，還定義了一個main的函數指針變量。由於C語言每個源文件單獨編譯，所以t.h分別包含了兩次，所以int a就被定義了兩次。兩個源文件裡變量b和函數指針變量main被重複定義了，實際上可以看做代碼段的地址。但編譯器並未報錯，只給出一條警告：</p>

<pre>
/usr/bin/ld: Warning: size of symbol 'b' changed from 4 in main.o to 8 in foo.o
</pre>

<p>運行程序發現，main.c打印中b大小是4個字節，而foo.c是8個字節，因為sizeof關鍵字是編譯時決議，而源文件中對b類型定義不一樣。但令人驚奇的是無論是在main.c還是foo.c中，a和b都是相同的地址，也就是說，a和b被定義了兩次，b還是不同類型，但內存映像中只有一份拷貝。我們還看到，main.c中b的值居然就是foo.c中結構體第一個成員變量b.a的值，這證實了前面的推斷——<strong>即便存在多次定義，內存中只有一份初始化的拷貝。</strong>另外在這裡c是置身事外的一個獨立變量。</p><p>為何會這樣呢？這涉及到<strong>C編譯器對多重定義的全局符號的解析和鏈接。</strong>在編譯階段，編譯器將全局符號信息隱含地編碼在可重定位目標文件的符號表裡。這裡有個<strong>「強符號(strong)」</strong>和<strong>「弱符號(weak)」</strong>的概念——前者指的是定義並且初始化了的變量，比如foo.c裡的結構體b，後者指的是未定義或者定義但未初始化的變量，比如main.c裡的整型b和c，還有兩個源文件都包含頭文件裡的a。當符號被多重定義時，GNU鏈接器(ld)使用以下規則決議：</p>

<ul> 
<li>不允許出現多個相同強符號。</li> 
<li>如果有一個強符號和多個弱符號，則選擇強符號。</li> 
<li>如果有多個弱符號，那麼先決議到size最大的那個，如果同樣大小，則按照鏈接順序選擇第一個。</li> 
</ul>

<p>像上面這個例子中，全局變量a和b存在重複定義。如果我們將main.c中的b初始化賦值，那麼就存在兩個強符號而違反了規則一，編譯器報錯。如果滿足規則二，則僅僅提出警告，實際運行時決議的是foo.c中的強符號。而變量a都是弱符號，所以只選擇一個（按照目標文件鏈接時的順序）。</p><p>事實上，這種規則是C語言裡的一個大坑，編譯器對這種全局變量多重定義的「縱容」很可能會無端修改某個變量，導致程序不確定行為。如果你還沒有意識到事態嚴重性，我再舉個例子。</p><h4>第二個例子</h4> <div><div id="highlighter_725033" class="syntaxhighlighter cpp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p></td><td class="code"><div class="container"><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;;</code></p><p><code class="cpp keyword bold">struct</code> <code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">a;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp plain">} b = { 2, 4 };</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main();</code></p><p><code class="cpp keyword bold">void</code> <code class="cpp plain">foo()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("foo:\t(&amp;b)=0x%08x\n\tsizeof(b)=%d\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b.a, b.b, main);</code></p><p><code class="cpp plain">}</code></p><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">c;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code> <code class="cpp plain">(0 == fork()) {</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">sleep(1);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">b = 1;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("child:\tsleep(1)\n\t(&amp;b):0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\t(&amp;c)=0x%08x\n\tsizeof(b)=%d\n\tset b=%d\n\tc=%d\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">foo();</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">} </code><code class="cpp keyword bold">else</code> <code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">foo();</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("parent:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tsizeof(b)=%d\n\tb=%d\n\tc=%d\n\twait child...\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">wait(-1);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("parent:\tchild over\n\t(&amp;b)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\t(&amp;c)=0x%08x\n\tsizeof(b)=%d\n\tb=%d\n\tc=%d\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></p><p><code class="cpp plain">}</code></p></div></td></tr></tbody></table></div></div>
<p>運行情況如下：</p>
<div><div id="highlighter_816403" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p></td><td class="code"><div class="container"><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x080484c8</code></p><p><code class="bash plain">parent: (&amp;b)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a034</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">wait child...</code></p><p><code class="bash plain">child:&nbsp; </code><code class="bash functions">sleep</code><code class="bash plain">(1)</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b):0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a034</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash functions">set</code> <code class="bash plain">b=1</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=1</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x080484c8</code></p><p><code class="bash plain">parent: child over</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a034</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p></div></td></tr></tbody></table></div></div><p>（說明一點，運行情況是直接輸出到stdout的打印，筆者曾經將./test輸出重定向到log中，結果發現打印的執行序列不一致，所以採用默認輸出。）</p><p>這是一個<strong>多進程環境</strong>，首先我們看到無論父進程還是子進程，main.c還是foo.c，全局變量b和c的地址仍然是一致的（當然只是個<strong>邏輯地址</strong>），而且對b的大小不同模塊仍然有不同的決議。這裡值得注意的是，我們在子進程中對變量b進行賦值動作，從此子進程本身包括foo()調用中，整型b以及結構體成員b.a的值都是1，而父進程中整型b和結構體成員b.a的值仍是2，但它們顯示的邏輯地址仍是一致的。</p><p>個人認為可以這樣解釋，fork創建新進程時，子進程獲得了父進程上下文「鏡像」（自然包括全局變量），虛擬地址相同但屬於不同的進程空間，而且此時真正映射的物理地址中只有一份拷貝，所以b的值是相同的（都是2）。隨後子進程對b改寫，觸發了操作系統的<strong>寫時拷貝(copy on write)</strong>機制，這時物理內存中才產生真正的兩份拷貝，分別映射到不同進程空間的虛擬地址上，但虛擬地址的值本身仍然不變，這對於應用程序來說是透明的，具有隱瞞性。</p><p>還有一點值得注意，這個示例編譯時沒有出現第一個示例的警告，即對變量b的sizeof決議，筆者也不知道為什麼，或許是GCC的一個bug？</p><h4>第三個例子</h4><p>這個例子代碼同上一個一致，只不過我們將foo.c做成一個靜態鏈接庫libfoo.a進行鏈接，這裡只給出Makefile的改動。</p><div><div id="highlighter_643298" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p></td><td class="code"><div class="container"><p><code class="bash functions">test</code><code class="bash plain">: main.o foo.o</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">ar rcs libfoo.a foo.o</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">gcc -static -o </code><code class="bash functions">test</code> <code class="bash plain">main.o libfoo.a</code></p><p><code class="bash plain">main.o: main.c</code></p><p><code class="bash plain">foo.o: foo.c</code></p><p><code class="bash plain">clean:</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash functions">rm</code> <code class="bash plain">-f *.o </code><code class="bash functions">test</code></p></div></td></tr></tbody></table></div></div><p>運行情況如下：</p><div><div id="highlighter_783574" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p></td><td class="code"><div class="container"><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x080ca008</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x08048250</code></p><p><code class="bash plain">parent: (&amp;b)=0x080ca008</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x080cc084</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">wait child...</code></p><p><code class="bash plain">child:&nbsp; </code><code class="bash functions">sleep</code><code class="bash plain">(1)</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b):0x080ca008</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x080cc084</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash functions">set</code> <code class="bash plain">b=1</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x080ca008</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=1</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x08048250</code></p><p><code class="bash plain">parent: child over</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;b)=0x080ca008</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x080cc084</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=2</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=0</code></p></div></td></tr></tbody></table></div></div><p>從這個例子看不出有啥差別，只不過使用<strong>靜態鏈接</strong>後，全局變量加載的地址有所改變，b和c的地址之間似乎相隔更遠了些。不過這次編譯器倒是給出了變量b的sizeof決議警告。</p><p>到此為止，有些人可能會對上面的例子嗤之以鼻，覺得這不過是列舉了C語言的某些特性而已，算不上黑。有些人認為既然如此，對於一切全局變量要麼用static限死，要麼定義同時初始化，杜絕弱符號，以便在編譯時報錯檢測出來。只要小心地使用，C語言還是很完美的嘛~對於抱這樣想法的人，我只想說，請你在夜深人靜的時候豎起耳朵仔細聆聽，你很可能聽到Dennis Richie在九泉之下邪惡的笑聲——不，與其說是嘲笑，不如說是詛咒……</p><h4>第四個例子</h4> <div><div id="highlighter_80748" class="syntaxhighlighter cpp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p></td><td class="code"><div class="container"><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp keyword bold">const</code> <code class="cpp keyword bold">struct</code> <code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">a;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp plain">} b = { 3, 3 };</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main();</code></p><p><code class="cpp keyword bold">void</code> <code class="cpp plain">foo()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">b.a = 4;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">b.b = 4;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("foo:\t(&amp;b)=0x%08x\n\tsizeof(b)=%d\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b.a, b.b, main);</code></p><p><code class="cpp plain">}</code></p><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">b = 1;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">c = 1;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">main()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">count = 5;</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">while</code> <code class="cpp plain">(count-- &gt; 0) {</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">t2();</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">foo();</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("t1:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tsizeof(b)=%d\n\tb=%d\n\tc=%d\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">sleep(1);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></p><p><code class="cpp plain">}</code></p><p><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">b;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">c;</code></p><p><code class="cpp color1 bold">int</code> <code class="cpp plain">t2()</code></p><p><code class="cpp plain">{</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">("t2:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">\tsizeof(b)=%d\n\tb=%d\n\tc=%d\n",</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">&amp;b, &amp;c, </code><code class="cpp keyword bold">sizeof</code> <code class="cpp plain">b, b, c);</code></p><p><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></p><p><code class="cpp plain">}</code></p></div></td></tr></tbody></table></div></div><p>Makefile腳本：</p><div><div id="highlighter_852977" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p></td><td class="code"><div class="container"><p><code class="bash functions">export</code> <code class="bash plain">LD_LIBRARY_PATH:=.</code></p><p><code class="bash plain">all: </code><code class="bash functions">test</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">.</code><code class="bash plain">/test</code></p><p><code class="bash functions">test</code><code class="bash plain">: t1.o t2.o</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">gcc -shared -fPIC -o libfoo.so foo.c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">gcc -o </code><code class="bash functions">test</code> <code class="bash plain">t1.o t2.o -L. -lfoo</code></p><p><code class="bash plain">t1.o: t1.c</code></p><p><code class="bash plain">t2.o: t2.c</code></p><p><code class="bash plain">.PHONY:clean</code></p><p><code class="bash plain">clean:</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash functions">rm</code> <code class="bash plain">-f *.o *.so </code><code class="bash functions">test</code><code class="bash plain">*</code></p></div></td></tr></tbody></table></div></div><p>執行結果：</p><div><div id="highlighter_458279" class="syntaxhighlighter bash"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p></td><td class="code"><div class="container"><p><code class="bash plain">.</code><code class="bash plain">/test</code></p><p><code class="bash plain">t2: (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=1</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=1</code></p><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x08048564</code></p><p><code class="bash plain">t1: (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=4</code></p><p><code class="bash plain">t2: (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=4</code></p><p><code class="bash plain">foo:&nbsp;&nbsp;&nbsp; (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=8</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.a=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b.b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">main:0x08048564</code></p><p><code class="bash plain">t1: (&amp;b)=0x0804a01c</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">(&amp;c)=0x0804a020</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">sizeof(b)=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">b=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">c=4</code></p><p><code class="bash spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="bash plain">...</code></p></div></td></tr></tbody></table></div></div><p>其實前面幾個例子只是開胃小菜而已，真正的大坑終於出現了！而且這次編譯器既沒報錯也沒警告，但我們確實眼睜睜地看到作為main()中強符號的b被改寫了，而且一旁的c也「躺槍」了。眼尖的讀者發現，這次foo.c是作為動態鏈接庫運行時加載的，當t1第一次調用t2時，libfoo.so還未加載，一旦調用了foo函數，b立馬中彈，而且<strong>c的地址居然還相鄰著b，這使得c一同中彈了。</strong>不過筆者有些無法解釋這種行為的原因，有種說法是強符號的全局變量在數據段中是連續分佈的（相應地弱符號暫存在.bss段或者符號表裡），或許可以上報GNU的編譯器開發小組。</p><p>另外筆者嘗試過將t1.c中的b和c定義前面加上<strong>const限定詞</strong>，編譯器仍然默認通過，但程序在main()中第一次調用foo()時觸發了Segment fault異常導致奔潰，在foo.c裡使用指針改寫它也一樣。<strong>推斷這是GCC對const常量所在地址啟用了類似操作系統寫保護機制，但我無法確定早期版本的GCC是否會讓這個const常量被改寫而程序不會奔潰。</strong></p><p>至於<strong>volatile關鍵詞</strong>之於全局變量，自測似乎沒有影響。</p><p>怎麼樣？看了最後一個例子是否有點「不明覺厲」呢？C語言在你心目中是否還是當初那個「純潔」、「乾淨」、「行為一致」的姑娘呢？也許趁著你不注意的時候她會偷偷給你戴頂綠帽，這一切都是通過全局變量，特別在動態鏈接的環境下，就算全部定義成強符號仍然無法為編譯器所察覺。而一些IT界「恐怖分子」也經常<strong>將惡意代碼包裝成全局變量注入到root權限下存在漏洞的操作序列中，</strong>就像著名的棧溢出攻擊那樣。某一天當你傻傻地看著一個程序出現未定義的行為卻無法定位原因的時候，請不要忘記Richie大爺那來自九泉之下最深沉的「問候」~</p><p>或許有些人會偷換概念，把這一切歸咎於編譯器和鏈接器身上，認為這同語言無關，但我要提醒你，正是編譯/鏈接器的行為支撐了整個語言的語法和語義。你可以反過來思考一下為何C的胞弟C++推出<strong>「命名空間(namespace)」</strong>的概念，或者你可以使用其它高級語言，對於重定義的全局變量是否能通過編譯這一關。</p><p>所以請時刻謹記，<span><strong>C是一門很恐怖的語言！</strong></span></p><p>P.S.題外話寫在最後。我無意挑起語言之爭，只是就事論事地去<strong>「黑(hack)</strong><strong>」</strong>一門語言而已，而且要黑就要黑得有理有力有層次，還要帶點娛樂精神。其實黑一門語言並非什麼尖端複雜的技術，個人覺得起碼要做到兩點：</p><ul> <li><strong>親自動手寫測試程序。</strong>動手寫測試程序是開發人員必備的基礎技能，只有現成的代碼才能讓人心服口服，那些只會停留在口頭上的爭論只能算作cheap hack。</li> </ul> <ul> <li><strong>測試程序不能依賴於不成熟的代碼。</strong>軟件開發99%以上的bug都是基於不合格(substandard)開發人員導致，這並不能怪罪於語言以及編譯器本身。使用諸如#define TRUE FALSE或者#define NULL 1之類的trick來黑C語言只能證明此人很有娛樂精神而不是真正的」hack value」，拿老北京梨園行當裡的一句話——「那是下三濫的玩意兒」。</li> </ul><p>（全文完）</p></div>
</body>
</html>

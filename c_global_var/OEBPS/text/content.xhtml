<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Dotepub.com</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" type="text/css" rel="stylesheet"/>
<link href="../../page_styles.css" type="text/css" rel="stylesheet"/>
</head>
  <body class="calibre5">
(感謝網友 @我的上鋪叫路遙 投稿) 作為一名程序員，如果說沉迷一門編程語言算作一種樂趣的話，那麼與此同時反過來去黑一門編程語言就是這種樂趣的昇華。今天我們就來黑一把C語言，好好展示一下這門經典語言令人抓狂的一面。
<p class="calibre6" style="margin:0pt; border:0pt; height:0pt"> </p>


<p class="calibre7">我們知道，全域變數是C語言語法和語義中一個很重要的知識點，首先它的存在意義需要從三個不同角度去理解：對於程序員來說，它是一個記錄內容的<strong class="calibre8">變數(variable)</strong>；對於編譯/鏈接器來說，它是一個需要解析的<strong class="calibre8">符號(symbol)</strong>；對於計算機來說，它可能是具有位址的一塊<strong class="calibre8">記憶體(memory)</strong>。其次是語法/語義：從作用域上看，帶static關鍵字的全域變數範圍只能限定在文件裡，否則會外聯到整個模塊和項目中；從生存期來看，它是靜態的，貫穿整個程序或模塊運行期間（<span class="calibre9"><strong class="calibre8">注意，正是跨單元訪問和持續生存週期這兩個特點使得全域變數往往成為一段受攻擊代碼的突破口，瞭解這一點十分重要</strong></span>）；從空間分配上看，定義且初始化的全域變數在編譯時在數據段(.data)分配空間，定義但未初始化的全域變數<strong class="calibre8">暫存(tentative definition)</strong>在.bss段，編譯時自動清零，而僅僅是聲明的全域變數只能算個符號，寄存在編譯器的符號表內，不會分配空間，直到鏈接或者運行時再重定向到相應的位址上。</p><p class="calibre7">我們將向您展現一下，<strong class="calibre8">非static限定全域變數</strong>在編譯/鏈接以及程序運行時會發生哪些有趣的事情，順便可以對C編譯器/鏈接器的解析原理管中窺豹。以下示例對ANSI C和GNU C標準都有效，筆者的編譯環境是Ubuntu下的GCC-4.4.3。</p>

        <h4 class="calibre10">第一個例子</h4> 

<pre class="calibre15">
<b> 1</b> /* t.h */
<b> 2</b> #ifndef _H_
<b> 3</b> #define _H_
<b> 4</b> int a;
<b> 5</b> #endif
<b> 6</b>  
<b> 7</b> /* foo.c */
<b> 8</b> #include &lt;stdio.h&gt;
<b> 9</b> #include &quot;t.h&quot;
<b>10</b>  
<b>11</b> struct {
<b>12</b>    char a;
<b>13</b>    int b;
<b>14</b> } b = { 2, 4 };
<b>15</b>  
<b>16</b> int main();
<b>17</b>  
<b>18</b> void foo()
<b>19</b> {
<b>20</b>     printf(&quot;foo:\t(&amp;a)=0x%08x\n\t(&amp;b)=0x%08x\n
<b>21</b>         \tsizeof(b)=%d\n\tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n&quot;,
<b>22</b>         &amp;a, &amp;b, sizeof b, b.a, b.b, main);
<b>23</b> }
<b>24</b>  
<b>25</b> /* main.c */
<b>26</b> #include &lt;stdio.h&gt;
<b>27</b> #include &quot;t.h&quot;
<b>28</b>  
<b>29</b> int b;
<b>30</b> int c;
<b>31</b>  
<b>32</b> int main()
<b>33</b> {
<b>34</b>     foo();
<b>35</b>     printf(&quot;main:\t(&amp;a)=0x%08x\n\t(&amp;b)=0x%08x\n
<b>36</b>         \t(&amp;c)=0x%08x\n\tsize(b)=%d\n\tb=%d\n\tc=%d\n&quot;,
<b>37</b>         &amp;a, &amp;b, &amp;c, sizeof b, b, c);
<b>38</b>     return 0;
<b>39</b> }
</pre>


<p class="calibre7">Makefile如下：</p>

<pre>
test: main.o foo.o
    gcc -o test main.o foo.o
 
main.o: main.c
foo.o: foo.c
 
clean:
    rm *.o test
</pre>

<p class="calibre15">執行結果：</p>
<pre>
<b> 1</b> foo:    (&amp;a)=0x0804a024
<b> 2</b>     (&amp;b)=0x0804a014
<b> 3</b>     sizeof(b)=8
<b> 4</b>     b.a=2
<b> 5</b>     b.b=4
<b> 6</b>     main:0x080483e4
<b> 7</b> main:   (&amp;a)=0x0804a024
<b> 8</b>     (&amp;b)=0x0804a014
<b> 9</b>     (&amp;c)=0x0804a028
<b>10</b>     size(b)=4
<b>11</b>     b=2
<b>12</b>     c=0
</pre>

<p class="calibre7">這個項目裡我們定義了四個全域變數，t.h頭文件定義了一個整型a，main.c裡定義了兩個整型b和c並且未初始化，foo.c裡定義了一個初始化了的結構體，還定義了一個main的函數指標變數。由於C語言每個源文件單獨編譯，所以t.h分別包含了兩次，所以int a就被定義了兩次。兩個源文件裡變數b和函數指標變數main被重複定義了，實際上可以看做代碼段的位址。但編譯器並未報錯，只給出一條警告：</p>

<pre class="calibre15">
/usr/bin/ld: Warning: size of symbol 'b' changed from 4 in main.o to 8 in foo.o
</pre>

<p class="calibre7">運行程序發現，main.c打印中b大小是4個 byte，而foo.c是8個 byte，因為sizeof關鍵字是編譯時決議，而源文件中對b類型定義不一樣。但令人驚奇的是無論是在main.c還是foo.c中，a和b都是相同的位址，也就是說，a和b被定義了兩次，b還是不同類型，但記憶體映像中只有一份拷貝。我們還看到，main.c中b的值居然就是foo.c中結構體第一個成員變數b.a的值，這證實了前面的推斷——<strong class="calibre8">即便存在多次定義，記憶體中只有一份初始化的拷貝。</strong>另外在這裡c是置身事外的一個獨立變數。</p><p class="calibre7">為何會這樣呢？這涉及到<strong class="calibre8">C編譯器對多重定義的全局符號的解析和鏈接。</strong>在編譯階段，編譯器將全局符號信息隱含地編碼在可重定位目標文件的符號表裡。這裡有個<strong class="calibre8">「強符號(strong)」</strong>和<strong class="calibre8">「弱符號(weak)」</strong>的概念——前者指的是定義並且初始化了的變數，比如foo.c裡的結構體b，後者指的是未定義或者定義但未初始化的變數，比如main.c裡的整型b和c，還有兩個源文件都包含頭文件裡的a。當符號被多重定義時，GNU鏈接器(ld)使用以下規則決議：</p>

<ul class="calibre16"> 
<li class="calibre17">不允許出現多個相同強符號。</li> 
<li class="calibre17">如果有一個強符號和多個弱符號，則選擇強符號。</li> 
<li class="calibre17">如果有多個弱符號，那麼先決議到size最大的那個，如果同樣大小，則按照鏈接順序選擇第一個。</li> 
</ul>

<p class="calibre7">像上面這個例子中，全域變數a和b存在重複定義。如果我們將main.c中的b初始化賦值，那麼就存在兩個強符號而違反了規則一，編譯器報錯。如果滿足規則二，則僅僅提出警告，實際運行時決議的是foo.c中的強符號。而變數a都是弱符號，所以只選擇一個（按照目標文件鏈接時的順序）。</p><p class="calibre7">事實上，這種規則是C語言裡的一個大坑，編譯器對這種全域變數多重定義的「縱容」很可能會無端修改某個變數，導致程序不確定行為。如果你還沒有意識到事態嚴重性，我再舉個例子。</p>

<h4 class="calibre10">第二個例子</h4> 

<pre class="calibre15">
<b> 1</b> /* foo.c */
<b> 2</b> #include &lt;stdio.h&gt;;
<b> 3</b>  
<b> 4</b> struct {
<b> 5</b>     int a;
<b> 6</b>     int b;
<b> 7</b> } b = { 2, 4 };
<b> 8</b>  
<b> 9</b> int main();
<b>10</b>  
<b>11</b> void foo()
<b>12</b> {
<b>13</b>   printf(&quot;foo:\t(&amp;b)=0x%08x\n\tsizeof(b)=%d\n
<b>14</b>     \tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n&quot;,
<b>15</b>     &amp;b, sizeof b, b.a, b.b, main);
<b>16</b> }
<b>17</b>  
<b>18</b> /* main.c */
<b>19</b> #include &lt;stdio.h&gt;
<b>20</b>  
<b>21</b> int b;
<b>22</b> int c;
<b>23</b>  
<b>24</b> int main()
<b>25</b> {
<b>26</b>   if (0 == fork()) {
<b>27</b>     sleep(1);
<b>28</b>     b = 1;
<b>29</b>     printf(&quot;child:\tsleep(1)\n\t(&amp;b):0x%08x\n
<b>30</b>       \t(&amp;c)=0x%08x\n\tsizeof(b)=%d\n\tset b=%d\n\tc=%d\n&quot;,
<b>31</b>       &amp;b, &amp;c, sizeof b, b, c);
<b>32</b>     foo();
<b>33</b>   } else {
<b>34</b>     foo();
<b>35</b>     printf(&quot;parent:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n
<b>36</b>       \tsizeof(b)=%d\n\tb=%d\n\tc=%d\n\twait child...\n&quot;,
<b>37</b>       &amp;b, &amp;c, sizeof b, b, c);
<b>38</b>     wait(-1);
<b>39</b>     printf(&quot;parent:\tchild over\n\t(&amp;b)=0x%08x\n
<b>40</b>       \t(&amp;c)=0x%08x\n\tsizeof(b)=%d\n\tb=%d\n\tc=%d\n&quot;,
<b>41</b>       &amp;b, &amp;c, sizeof b, b, c);
<b>42</b>     }
<b>43</b>     return 0;
<b>44</b> }
</pre>

<p class="calibre15">執行結果如下：</p>
<pre>
<b> 1</b> foo:    (&amp;b)=0x0804a020
<b> 2</b>     sizeof(b)=8
<b> 3</b>     b.a=2
<b> 4</b>     b.b=4
<b> 5</b>     main:0x080484c8
<b> 6</b> parent: (&amp;b)=0x0804a020
<b> 7</b>     (&amp;c)=0x0804a034
<b> 8</b>     sizeof(b)=4
<b> 9</b>     b=2
<b>10</b>     c=0
<b>11</b>     wait child...
<b>12</b> child:  sleep(1)
<b>13</b>     (&amp;b):0x0804a020
<b>14</b>     (&amp;c)=0x0804a034
<b>15</b>     sizeof(b)=4
<b>16</b>     set b=1
<b>17</b>     c=0
<b>18</b> foo:    (&amp;b)=0x0804a020
<b>19</b>     sizeof(b)=8
<b>20</b>     b.a=1
<b>21</b>     b.b=4
<b>22</b>     main:0x080484c8
<b>23</b> parent: child over
<b>24</b>     (&amp;b)=0x0804a020
<b>25</b>     (&amp;c)=0x0804a034
<b>26</b>     sizeof(b)=4
<b>27</b>     b=2
<b>28</b>     c=0
</pre>

<p class="calibre7">
(說明一點，執行結果是直接輸出到stdout的打印，筆者曾經將./test輸出重定向到log中，結果發現打印的執行序列不一致，
所以採用默認輸出。)
</p>

<p class="calibre7">這是一個<strong class="calibre8">多進程環境</strong>，首先我們看到無論父進程還是子進程，main.c
還是foo.c，全域變數b和c的位址仍然是一致的（當然只是個<strong class="calibre8">邏輯位址</strong>），而且對b
的大小不同模塊仍然有不同的決議。這裡值得注意的是，我們在子進程中對變數b進行賦值動作，從此子進程本身包括foo()調用中，整型
b以及結構體成員b.a的值都是1，而父進程中整型b和結構體成員b.a的值仍是2，但它們顯示的邏輯位址仍是一致的。</p>

<p class="calibre7">個人認為可以這樣解釋，fork創建新進程時，子進程獲得了父進程上下文「鏡像」（自然包括全域變數），
虛擬位址相同但屬於不同的進程空間，而且此時真正映射的物理位址中只有一份拷貝，所以b的值是相同的（都是2）。隨後子進程對b
改寫，觸發了操作系統的<strong class="calibre8">寫時拷貝(copy on write)</strong>機制，
這時物理記憶體中才產生真正的兩份拷貝，分別映射到不同進程空間的虛擬位址上，但虛擬位址的值本身仍然不變，
這對於應用程序來說是透明的，具有隱瞞性。</p>

<p class="calibre7">還有一點值得注意，這個示例編譯時沒有出現第一個示例的警告，即對變數b的sizeof決議，筆者也不知道為什麼，或許是GCC的一個bug？</p>

<h4 class="calibre10">第三個例子</h4>

<p class="calibre7">這個例子代碼同上一個一致，只不過我們將foo.c做成一個靜態鏈接庫libfoo.a進行鏈接，這裡只列出Makefile的差異。</p>








<pre>
test: main.o foo.o
    ar rcs libfoo.a foo.o
    gcc -static -o test main.o libfoo.a
 
main.o: main.c
foo.o: foo.c
 
clean:
    rm -f *.o test
</pre>

<p class="calibre7">執行結果如下：</p>

<pre>
<b> 1</b> foo:    (&amp;b)=0x080ca008
<b> 2</b>     sizeof(b)=8
<b> 3</b>     b.a=2
<b> 4</b>     b.b=4
<b> 5</b>     main:0x08048250
<b> 6</b> parent: (&amp;b)=0x080ca008
<b> 7</b>     (&amp;c)=0x080cc084
<b> 8</b>     sizeof(b)=4
<b> 9</b>     b=2
<b>10</b>     c=0
<b>11</b>     wait child...
<b>12</b> child:  sleep(1)
<b>13</b>     (&amp;b):0x080ca008
<b>14</b>     (&amp;c)=0x080cc084
<b>15</b>     sizeof(b)=4
<b>16</b>     set b=1
<b>17</b>     c=0
<b>18</b> foo:    (&amp;b)=0x080ca008
<b>19</b>     sizeof(b)=8
<b>20</b>     b.a=1
<b>21</b>     b.b=4
<b>22</b>     main:0x08048250
<b>23</b> parent: child over
<b>24</b>     (&amp;b)=0x080ca008
<b>25</b>     (&amp;c)=0x080cc084
<b>26</b>     sizeof(b)=4
<b>27</b>     b=2
<b>28</b>     c=0
</pre>

<p class="calibre7">從這個例子看不出有啥差別，只不過使用<strong class="calibre8">靜態鏈接</strong>後，全域變數加載的位址有所改變，b和c的位址之間似乎相隔更遠了些。不過這次編譯器倒是給出了變數b的sizeof決議警告。</p><p class="calibre7">到此為止，有些人可能會對上面的例子嗤之以鼻，覺得這不過是列舉了C語言的某些特性而已，算不上黑。有些人認為既然如此，對於一切全域變數要麼用static限死，要麼定義同時初始化，杜絕弱符號，以便在編譯時報錯檢測出來。只要小心地使用，C語言還是很完美的嘛~對於抱這樣想法的人，我只想說，請你在夜深人靜的時候豎起耳朵仔細聆聽，你很可能聽到Dennis Richie在九泉之下邪惡的笑聲——不，與其說是嘲笑，不如說是詛咒……</p>
<h4 class="calibre10">第四個例子</h4> 

<pre>
<b> 1</b> /* foo.c */
<b> 2</b> #include &lt;stdio.h&gt;
<b> 3</b>  
<b> 4</b> const struct 
<b> 5</b> {
<b> 6</b>   int a;
<b> 7</b>   int b;
<b> 8</b> } b = { 3, 3 };
<b> 9</b>  
<b>10</b> int main();
<b>11</b>  
<b>12</b> void foo()
<b>13</b> {
<b>14</b>   b.a = 4;
<b>15</b>   b.b = 4;
<b>16</b>   printf(&quot;foo:\t(&amp;b)=0x%08x\n\tsizeof(b)=%d\n
<b>17</b>     \tb.a=%d\n\tb.b=%d\n\tmain:0x%08x\n&quot;,
<b>18</b>     &amp;b, sizeof b, b.a, b.b, main);
<b>19</b> }
<b>20</b>  
<b>21</b> /* t1.c */
<b>22</b> #include &lt;stdio.h&gt;
<b>23</b>  
<b>24</b> int b = 1;
<b>25</b> int c = 1;
<b>26</b>  
<b>27</b> int main()
<b>28</b> {
<b>29</b>   int count = 5;
<b>30</b>   while (count-- &gt; 0) 
<b>31</b>   {
<b>32</b>     t2();
<b>33</b>     foo();
<b>34</b>     printf(&quot;t1:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n
<b>35</b>       \tsizeof(b)=%d\n\tb=%d\n\tc=%d\n&quot;,
<b>36</b>       &amp;b, &amp;c, sizeof b, b, c);
<b>37</b>     sleep(1);
<b>38</b>   }
<b>39</b>   return 0;
<b>40</b> }
<b>41</b>  
<b>42</b> /* t2.c */
<b>43</b> #include &lt;stdio.h&gt;
<b>44</b>  
<b>45</b> int b;
<b>46</b> int c;
<b>47</b>  
<b>48</b> int t2()
<b>49</b> {
<b>50</b>   printf(&quot;t2:\t(&amp;b)=0x%08x\n\t(&amp;c)=0x%08x\n
<b>51</b>     \tsizeof(b)=%d\n\tb=%d\n\tc=%d\n&quot;,
<b>52</b>     &amp;b, &amp;c, sizeof b, b, c);
<b>53</b>   return 0;
<b>54</b> }
</pre>

<pre>
export LD_LIBRARY_PATH:=.
 
all: test
    ./test
 
test: t1.o t2.o
    gcc -shared -fPIC -o libfoo.so foo.c
    gcc -o test t1.o t2.o -L. -lfoo
 
t1.o: t1.c
t2.o: t2.c
 
.PHONY:clean
clean:
    rm -f *.o *.so test*
</pre>
<p class="calibre7">執行結果：</p>

<pre>
<b> 1</b> ./test
<b> 2</b> t2: (&amp;b)=0x0804a01c
<b> 3</b>     (&amp;c)=0x0804a020
<b> 4</b>     sizeof(b)=4
<b> 5</b>     b=1
<b> 6</b>     c=1
<b> 7</b> foo:    (&amp;b)=0x0804a01c
<b> 8</b>     sizeof(b)=8
<b> 9</b>     b.a=4
<b>10</b>     b.b=4
<b>11</b>     main:0x08048564
<b>12</b> t1: (&amp;b)=0x0804a01c
<b>13</b>     (&amp;c)=0x0804a020
<b>14</b>     sizeof(b)=4
<b>15</b>     b=4
<b>16</b>     c=4
<b>17</b> t2: (&amp;b)=0x0804a01c
<b>18</b>     (&amp;c)=0x0804a020
<b>19</b>     sizeof(b)=4
<b>20</b>     b=4
<b>21</b>     c=4
<b>22</b> foo:    (&amp;b)=0x0804a01c
<b>23</b>     sizeof(b)=8
<b>24</b>     b.a=4
<b>25</b>     b.b=4
<b>26</b>     main:0x08048564
<b>27</b> t1: (&amp;b)=0x0804a01c
<b>28</b>     (&amp;c)=0x0804a020
<b>29</b>     sizeof(b)=4
<b>30</b>     b=4
<b>31</b>     c=4
<b>32</b>     ...
</pre>



<p class="calibre7">其實前面幾個例子只是開胃小菜而已，真正的大坑終於出現了！而且這次編譯器既沒報錯也沒警告，但我們確實眼睜睜地看到作為main()中強符號的b被改寫了，而且一旁的c也「躺槍」了。眼尖的讀者發現，這次foo.c是作為動態鏈接庫運行時加載的，當t1第一次調用t2時，libfoo.so還未加載，一旦調用了foo函數，b立馬中彈，而且<strong class="calibre8">c的位址居然還相鄰著b，這使得c一同中彈了。</strong>不過筆者有些無法解釋這種行為的原因，有種說法是強符號的全域變數在數據段中是連續分佈的（相應地弱符號暫存在.bss段或者符號表裡），或許可以上報GNU的編譯器開發小組。</p><p class="calibre7">另外筆者嘗試過將t1.c中的b和c定義前面加上<strong class="calibre8">const限定詞</strong>，編譯器仍然默認通過，但程序在main()中第一次調用foo()時觸發了Segment fault異常導致奔潰，在foo.c裡使用指標改寫它也一樣。<strong class="calibre8">推斷這是GCC對const常量所在位址啟用了類似操作系統寫保護機制，但我無法確定早期版本的GCC是否會讓這個const常量被改寫而程序不會奔潰。</strong></p><p class="calibre7">至於<strong class="calibre8">volatile關鍵詞</strong>之於全域變數，自測似乎沒有影響。</p><p class="calibre7">怎麼樣？看了最後一個例子是否有點「不明覺厲」呢？C語言在你心目中是否還是當初那個「純潔」、「乾淨」、「行為一致」的姑娘呢？也許趁著你不注意的時候她會偷偷給你戴頂綠帽，這一切都是通過全域變數，特別在動態鏈接的環境下，就算全部定義成強符號仍然無法為編譯器所察覺。而一些IT界「恐怖分子」也經常<strong class="calibre8">將惡意代碼包裝成全域變數注入到root權限下存在漏洞的操作序列中，</strong>就像著名的棧溢出攻擊那樣。某一天當你傻傻地看著一個程序出現未定義的行為卻無法定位原因的時候，請不要忘記Richie大爺那來自九泉之下最深沉的「問候」~</p><p class="calibre7">或許有些人會偷換概念，把這一切歸咎於編譯器和鏈接器身上，認為這同語言無關，但我要提醒你，正是編譯/鏈接器的行為支撐了整個語言的語法和語義。你可以反過來思考一下為何C的胞弟C++推出<strong class="calibre8">「命名空間(namespace)」</strong>的概念，或者你可以使用其它高級語言，對於重定義的全域變數是否能通過編譯這一關。</p><p class="calibre7">所以請時刻謹記，<span class="calibre9"><strong class="calibre8">C是一門很恐怖的語言！</strong></span></p><p class="calibre7">P.S.題外話寫在最後。我無意挑起語言之爭，只是就事論事地去<strong class="calibre8">「黑(hack)</strong><strong class="calibre8">」</strong>一門語言而已，而且要黑就要黑得有理有力有層次，還要帶點娛樂精神。其實黑一門語言並非什麼尖端複雜的技術，個人覺得起碼要做到兩點：</p>

<ul class="calibre16"> <li class="calibre17"><strong class="calibre8">親自動手寫測試程序。</strong>
動手寫測試程序是開發人員必備的基礎技能，只有現成的代碼才能讓人心服口服，那些只會停留在口頭上的爭論只能算作cheap hack。
</li> 
<li class="calibre17"><strong class="calibre8">測試程序不能依賴於不成熟的代碼。</strong>軟件開發99%以上的bug
都是基於不合格(substandard)開發人員導致，這並不能怪罪於語言以及編譯器本身。使用諸如
#define TRUE FALSE或者#define NULL 1之類的trick來黑C語言只能證明此人很有娛樂精神而不是真正的」
hack value」，拿老北京梨園行當裡的一句話——「那是下三濫的玩意兒」。</li> </ul>
<p class="calibre7">（全文完）</p>

</body>
</html>

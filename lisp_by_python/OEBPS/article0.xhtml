<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>http://www.grabmybooks.com</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
<h2 class="calibre1">軟體學徒forever: 中文試譯: (How to Write a (Lisp) Interpreter (in Python))</h2>
<p class="calibre2"><b class="calibre3">中文試譯: (How to Write a (Lisp) Interpreter (in Python)) </b></p>

<p class="calibre2">作者: <a href="http://norvig.com/" target="_blank">Peter Norvig</a> 原文連結: <a href="http://norvig.com/lispy.html" target="_blank">http://norvig.com/lispy.html</a> 這篇文章有兩個目的: 描述直譯器通常是如何實作出來，以及展示如何用<a href="http://python.org/" target="_blank">Python</a> 去完成<a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" target="_blank">Scheme</a> 的子集，Scheme是Lisp的一種方言。我將我的直譯器叫作<i class="calibre4">Lispy</i> (<a href="http://lis.py/" target="_blank">lis.py</a> )。幾年前，我曾展現過如何<a href="http://norvig.com/jscheme.html" target="_blank">用Java寫一個Scheme直譯器</a>, 類似的Scheme直譯器也曾經以<a href="http://books.google.com/books?id=QzGuHnDhvZIC&amp;lpg=PA756&amp;vq=scheme%20interpreter&amp;dq=Paradigms%20of%20Artificial%20Intelligence%20Programming&amp;pg=PA753#v=onepage&amp;q&amp;f=false" target="_blank">Common Lisp實作過</a> 。這次的目的則是為了儘可能地證明<a href="http://queue.acm.org/detail.cfm?id=1039523" target="_blank">Alan Kay曾宣示</a> 的<i class="calibre4">"軟體的馬克斯威爾方程式"</i> 。</p>

<p class="calibre2"><b class="calibre3">Scheme子集，Lispy的語法及語意</b> 大部份的電腦語言有多樣化的句法規則(關鍵字、中序運算子、大括號、運算子順序、點的表示、分號...等等)。然而，身為Lisp家族的一員，Scheme所有的語法都是根基於括號的list的前置表示法。這或許會不太令人習慣，但這會有簡單與一致性的好處。(有人開玩笑地說，"Lisp"表示"一堆惹人生氣的智障括號(<i class="calibre4"><a href="http://www.google.com/search?q=Lots+of+Irritating+Silly+Parentheses" target="_blank">Lots of Irritating Silly Parentheses</a> </i> )"，我認為Lisp是表示"Lisp是純淨的句法(<i class="calibre4"><a href="http://www.google.com/search?hl=en&amp;as_q=&amp;as_epq=Lisp+Is+Syntactically+Pure" target="_blank">Lisp Is Syntactically Pure</a> </i> )")。考慮一下: </p>

<table border="1" class="calibre5"> <tr class="row"><td class="calibre6">Java</td> <td class="calibre6"> </td> <td class="calibre6">Scheme </td> </tr> <tr class="row"><td class="calibre6"/> </tr> <tr class="row"><td class="calibre6"><b class="calibre3">if</b> (<i class="calibre4">x.val() &gt; 0</i> ) { <br class="calibre7"/><i class="calibre4">z = f(a * x.val() + b);</i> } </td> <td class="calibre6"> </td> <td class="calibre6">(if (&gt; (val x) 0) <br class="calibre7"/>    (set! z (f (+ (* a (val x)) b))))     </td> </tr> </table>

<p class="calibre2">注意，驚嘆號並不是Scheme中的特殊字元，它只是"set!"這個名字的一部份。只有小括號才是特別的。一個像(set! x y)這樣有著關鍵字在第一個位置的list，在Scheme中稱呼為special form，這個語言美麗之處就在於只需要6個special form，加上3個可建立句法的組件-variables, constant,以及procedure call。</p>

<table border="1" class="calibre5"> <tr class="row"><td class="calibre6">型式</td> <td class="calibre6">語法</td> <td class="calibre6">語意和範例</td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.1" target="_blank">variable reference</a> </td> <td class="calibre6"><i class="calibre4">var</i> </td> <td class="calibre6">一個符號會被解釋為一個變數名稱，其值就是該變數的值。<br class="calibre7"/>範例: x </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.2" target="_blank">constant literal</a> </td> <td class="calibre6"><i class="calibre4">number</i> </td> <td class="calibre6">一個數值會被估算為本身的值<br class="calibre7"/>範例: 12 或 -3.45e+6 </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.2" target="_blank">quotation</a> </td> <td class="calibre6">(quote  <i class="calibre4">exp</i> ) </td> <td class="calibre6">將一個<i class="calibre4">exp</i> 以字面型式直接回傳，不進行估算。<br class="calibre7"/>範例: (quote (a b c)) ⇒ (a b c) </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.5" target="_blank">conditional</a> </td> <td class="calibre6">(if <i class="calibre4">test conseq alt</i> ) </td> <td class="calibre6">估算  <i class="calibre4">test，</i> 如果為真，則估算並返回<i class="calibre4">conseq</i> 的值，否則就估算並返回 <i class="calibre4">alt</i> 的值。<br class="calibre7"/>範例: (if (&lt; 10 20) (+ 1 1) (+ 3 3)) ⇒ 2</td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.6" target="_blank">assignment</a> </td> <td class="calibre6">(set! <i class="calibre4">var exp</i> ) </td> <td class="calibre6">估算 <i class="calibre4">exp</i> 並將其值給予  <i class="calibre4">var</i>, 在此之前，<i class="calibre4">var</i> 必須先有定義才行(使用define或被當作一個procedure的參數)。<br class="calibre7"/>範例: (set! x2 (* x x))</td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-8.html#%_sec_5.2" target="_blank">definition</a> </td> <td class="calibre6">(define <i class="calibre4">var</i> <i class="calibre4">exp</i> ) </td> <td class="calibre6">在最近的環境中定義一個新的變數，並將<i class="calibre4">exp</i> 的估算值設定到該變數上。<br class="calibre7"/>範例:  (define r 3) <i class="calibre4">or</i> (define square (lambda (x) (* x x))) </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.4" target="_blank">procedure</a> </td> <td class="calibre6">(lambda ( <i class="calibre4">var...</i> ) <i class="calibre4">exp</i> ) </td> <td class="calibre6">產生一個帶有多個參數<i class="calibre4">var...</i> 的程序，其程序主體為<i class="calibre4">exp</i> 。<br class="calibre7"/>範例: (lambda (r) (* 3.141592653 (* r r))) </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.2.3" target="_blank">sequencing</a> </td> <td class="calibre6">(begin  <i class="calibre4">exp...</i> ) </td> <td class="calibre6">從左至右估算每一個表示式，然後回傳最後的估算值。<br class="calibre7"/>範例: (begin (set! x 1) (set! x (+ x 1)) (* x 2)) ⇒ 4 </td> </tr> <tr class="row"><td class="calibre6"><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.1.3" target="_blank">procedure call</a> </td> <td class="calibre6">( <i class="calibre4">proc exp...</i> ) </td> <td class="calibre6">如果<i class="calibre4">proc</i> 不是 if, set!, define, lambda, begin,  或 quote，那就會被當作一個程序。它會以此處所定義的規則來估算。所有的表示式也是用同樣的準則來求值，然後程序會被餵入一串表示式作為參數。 <br class="calibre7"/>範例: (square 12) ⇒ 144 </td> </tr> </table>

<p class="calibre2">在此表中，<i class="calibre4">var</i> 必須是一個符號--一個像是 x 或 square 的識別符號，而 <i class="calibre4">number</i> 必須是一個整數或浮點數，其他的斜體字則可以是任意的表示法。<i class="calibre4">exp</i> ...表示0或多個<i class="calibre4">exp</i> 的重複。<br class="calibre7"/>如果想深入學習Scheme，可參考一些很棒的書籍(<a href="http://books.google.com/books?id=xyO-KLexVnMC&amp;lpg=PP1&amp;dq=scheme%20programming%20book&amp;pg=PP1#v=onepage&amp;q&amp;f=false" target="_blank">Friedman and Fellesein</a>, <a href="http://books.google.com/books?id=wftS4tj4XFMC&amp;lpg=PA300&amp;dq=scheme%20programming%20book&amp;pg=PP1#v=onepage&amp;q&amp;f=false" target="_blank">Dybvig</a>, <a href="http://books.google.com/books?id=81mFK8pqh5EC&amp;lpg=PP1&amp;dq=scheme%20programming%20book&amp;pg=PP1#v=onepage&amp;q&amp;f=false" target="_blank">Queinnec</a>,<a href="http://www.eecs.berkeley.edu/~bh/ss-toc2.html" target="_blank">Harvey and Wright</a>  或<a href="http://mitpress.mit.edu/sicp/" target="_blank">Sussman and Abelson</a> ), 影片 (by <a href="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/" target="_blank">Abelson and Sussman</a> ), 教學 (by <a href="http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html" target="_blank">Dorai</a>, <a href="http://docs.racket-lang.org/quick/index.html" target="_blank">PLT</a>, or<a href="http://cs.gettysburg.edu/~tneller/cs341/scheme-intro/index.html" target="_blank">Neller</a> ), 或<a href="http://www.schemers.org/Documents/Standards/R5RS/HTML" target="_blank">reference manual</a> 。</p>

<p class="calibre2"><b class="calibre3"> 一個語言直譯器作了什麼？ </b></p>

<p class="calibre2">一個語言直譯器有兩件事要處理: </p>

<p class="calibre2">1. <b class="calibre3">剖析</b> : parsing元件會被輸入一個以一連串字元所組成的程式，然後藉由<i class="calibre4">句法規則</i> (<i class="calibre4">syntactic rules</i> )來檢視程式，並將程式轉換為一種內部的表達方式。在簡單的直譯器裡，內部表達方式會是一種樹，看起來會很接近程式裡的巢狀結構與表示式的樣子。叫作編譯器的語言轉換器則會將此內部表達方式化為一連串的指令，可以直接被電腦所執行。如同<a href="http://steve-yegge.blogspot.com/2007/06/rich-programmer-food.html" target="_blank">Steve Tegge</a> 所說: "如果你不知道編譯器如何工作，那麼你就不知道電腦如何工作。"，Yegge描述了八種可以透過編譯器解決問題的情況(直譯器也是一樣，或Yegge's typical heavy dosage of cynicism)。Lispy parser實作在函式 parse 中。</p>

<p class="calibre2">2. <b class="calibre3">執行</b> : 內部表達可以根據語言的<i class="calibre4">語意規則</i> (<i class="calibre4">semantic rules</i> )來處理，然後給出最後計算結果。執行的部份是在函式 eval 中實作(注意，此名稱遮蓋了Python的內建函式)。</p>

<p class="calibre2">這邊有一張直譯過程的示意圖，以及一個把玩 parse, eval
範例:</p>

<br class="calibre7"/>
<img src="img/chart.png" alt="chart.png" class="calibre8"/>
<br class="calibre7"/>

<pre style="white-space: pre-wrap;">
<b>1</b> &gt;&gt; program = &quot;(begin (define r 3) (* 3.141592653 (* r r)))&quot;
<b>2</b> 
<b>3</b> &gt;&gt;&gt; parse(program)
<b>4</b> ['begin', ['define', 'r', 3], ['*', 3.141592653, ['*', 'r', 'r']]]
<b>5</b> 
<b>6</b> &gt;&gt;&gt; eval(parse(program))
<b>7</b> 28.274333877
</pre>

<p class="calibre2"><b class="calibre3"> </b></p>

<p class="calibre2"><b class="calibre3"> </b></p>

<p class="calibre2"><b class="calibre3"> 執 行: eval </b></p>

<p class="calibre2"> <b class="calibre3">這邊是eval的定義。上表中的9個規則在此處都有幾行實作，eval的定義就只需處理這9個規則: </b> </p>

<p class="calibre2"><b class="calibre3">def eval(x, env=global_env):<br class="calibre7"/>"Evaluate an expression in an environment."<br class="calibre7"/>if isa(x, Symbol): # variable reference<br class="calibre7"/>return env.find(x)[x]<br class="calibre7"/>elif not isa(x, list): # constant literal<br class="calibre7"/>return x                <br class="calibre7"/>    elif x[0] == 'quote': # (quote exp)<br class="calibre7"/>(_, exp) = x<br class="calibre7"/>        return exp<br class="calibre7"/>    elif x[0] == 'if': # (if test conseq alt)<br class="calibre7"/>(_, test, conseq, alt) = x<br class="calibre7"/>        return eval((conseq if eval(test, env) else alt), env)<br class="calibre7"/>elif x[0] == 'set!': # (set! var exp)<br class="calibre7"/>(_, var, exp) = x<br class="calibre7"/>        env.find(var)[var] = eval(exp, env)<br class="calibre7"/>elif x[0] == 'define': # (define var exp)<br class="calibre7"/>(_, var, exp) = x<br class="calibre7"/>        env[var] = eval(exp, env)<br class="calibre7"/>elif x[0] == 'lambda': # (lambda (var*) exp)<br class="calibre7"/>(_, vars, exp) = x<br class="calibre7"/>        return lambda *args: eval(exp, Env(vars, args, env))<br class="calibre7"/>elif x[0] == 'begin': # (begin exp*)<br class="calibre7"/>for exp in x[1:]:<br class="calibre7"/>            val = eval(exp, env)<br class="calibre7"/>return val<br class="calibre7"/>    else: # (proc exp*)<br class="calibre7"/>        exps = [eval(exp, env) for exp in x]<br class="calibre7"/>        proc = exps.pop(0)<br class="calibre7"/>return proc(*exps)</b></p>

<p class="calibre2">isa = isinstance<br class="calibre7"/>Symbol = str </p>

<p class="calibre2"> <b class="calibre3"><i class="calibre4">這就是所有要估算的了！</i> ...嗯，除了environments以外。environments僅僅是符號與其值的對應而已。一個新的符號/值的關聯會藉由define或一個程序(lambda 表示式)被加入environment中。我們來看看一個例子，當定義了一個Scheme 程序以及呼叫它時會發生什麼事情(提示符號 lis.py&gt; 表示我們正跟Lisp直譯器交談，而不是Python): </b> <b class="calibre3"> </b>  </p>

<p class="calibre2"><b class="calibre3">lis.py&gt; (define area (lambda (r) (* 3.141592653 (* r r))))<br class="calibre7"/>lis.py&gt; (area 3)<br class="calibre7"/>28.274333877</b> </p>

<p class="calibre2"> <b class="calibre3">當我們估算(lambda (r) (* 3.141592653 (* r r)))時，我們會跳到eval的elif x[0] == 'lambda'的分支，將list x指定給3個變數(_, vars, exp)(並且在x的長度不為3的時候發出錯誤)。我們接著造出一個新的程序，該程序若被呼叫時，會在與程序參數關聯的environment中估算['*', 3.141592653, ['*', 'r', 'r']](此例中只有 r 一個參數)，而任何不在參數列裡的變數會在當前的environment中查找(變數 * 就是一個例子)。新建的程序接著就會被當作area的值被放進 global_env中。</b> <b class="calibre3"> </b>  <b class="calibre3">當我們估算(area 3)時會發生什麼事呢？既然 area 不是任何的 special form的符號，它必定為程序呼叫(eval中最後的 else:)，然後整串表示式會一個一個被估算。估算 area 會喚起我們剛建立的程序;估算 3 則獲得 3。我們接著(根據eval的最後一行)呼叫剛新建立的程序並給予 list[3] 作為參數。這就是說，要在r為3的environment中估算表示式 ['*', 3.141592653, ['*', 'r', 'r']]，並且外層的environment為global environment，因此 * 就是乘法的程序。</b>  <b class="calibre3">現在我們已經準備好可以解釋 Env 的詳細實作了: </b>  </p>

<p class="calibre2"><b class="calibre3">class Env(dict):<br class="calibre7"/>"An environment: a dict of {'var':val} pairs, with an outer Env."<br class="calibre7"/>def __init__(self, parms=(), args=(), outer=None):<br class="calibre7"/>        self.update(zip(parms,args))<br class="calibre7"/>        self.outer = outer<br class="calibre7"/>    def find(self, var):<br class="calibre7"/>"Find the innermost Env where var appears."<br class="calibre7"/>return self if var in self else self.outer.find(var)</b> </p>

<p class="calibre2">   <b class="calibre3">注意，Env是 dict 的子類別，也就表示了原本對於字典的操作一樣可以正常運作。除此以外，還多了兩個 methods，constructor __init__以及可在正確 environment 找出變數的 find method。理解這個類別的關鍵(以及我們需要一個類別，而不是直接使用 dict)在於 outer environment的標示。考慮下列程式: </b> </p>

<p class="calibre2">(define <b class="calibre3">make-account</b> </p>

<p class="calibre2">  (lambda (<b class="calibre3">balance</b> )</p>

<p class="calibre2">    (lambda (<b class="calibre3">amt</b> )<br class="calibre7"/>      (begin <b class="calibre3">(set! balance (+ balance amt))</b>  balance)))) </p>

<p class="calibre2">(define <b class="calibre3">a1</b>  (make-account 100.00))<br class="calibre7"/>(a1 -20.00) </p>

<p class="calibre2"><b class="calibre3">每一個矩型盒子表示一個 environment, 盒子的顏色與定義於該 environment 的變數的顏色會相符。在最後兩行，我們定義了 a1，然後呼叫了 (a1 -20.00)，這表示建立了一個100元的銀行帳戶，然後接著提領出20元。在估算(a1 -20.00)的過程中，我們會估算標示為黃色的那段表示式。該表示式中有3個變數。amt可以立即在最內層的 environment找到(綠色)，但balance並不存在該層: 我們必須到綠色的更外一層 env 去查找，也就是藍色的那層 env。最後，變數 + 也無法在那邊找到，所以我們必須到更外層去，於是到了global (紅色) environment。這種先查找最內層envrionment然後逐步往外層的過程稱為 <i class="calibre4">lexical scoping</i> 。程序 find 會根據 lexical scoping 規則找到正確的 environment 。</b> </p>

<p class="calibre2"> <b class="calibre3">剩下的事情就只有定義global environment了。它需有 + 以及其他 Scheme 的內建程序。我們不用實作全部的內容，只要匯入 Python 的 math 模組，我們就可以有20個常用的程序: </b> </p>

<p class="calibre2"><b class="calibre3">def add_globals(env):<br class="calibre7"/>"Add some Scheme standard procedures to an environment."<br class="calibre7"/>import math, operator as op<br class="calibre7"/>    env.update(vars(math)) # sin, sqrt, ...<br class="calibre7"/>    env.update(<br class="calibre7"/>{'+':op.add, '-':op.sub, '*':op.mul, '/':op.div, 'not':op.not_,<br class="calibre7"/>'&gt;':op.gt, '&lt;':op.lt, '&gt;=':op.ge, '&lt;=':op.le, '=':op.eq,<br class="calibre7"/>'equal?':op.eq, 'eq?':op.is_, 'length':len, 'cons':lambda x,y:[x]+y,<br class="calibre7"/>'car':lambda x:x[0],'cdr':lambda x:x[1:], 'append':op.add,<br class="calibre7"/>'list':lambda *x:list(x), 'list?': lambda x:isa(x,list),<br class="calibre7"/>'null?':lambda x:x==[], 'symbol?':lambda x: isa(x, Symbol)})<br class="calibre7"/>return env</b></p>

<p class="calibre2">global_env = add_globals(Env()) </p>

<p class="calibre2"><b class="calibre3">剖析: read以及parse</b> <b class="calibre3">該來談談 parse 程序了。傳統上，剖析會分為兩個步驟: lexical analysis，會將輸入字串分切為一串 tokens；syntactic analysis，則會將tokens組為內部表達式。Lispy 的 tokens 有 小括號、符號(像是set! 或 x)、數字(像是2)。它會像這樣運作: </b>  </p>

<p class="calibre2"><b class="calibre3">&gt;&gt;&gt; program = "(set! twox (* x 2))"<br class="calibre7"/>&gt;&gt;&gt; tokenize(program)<br class="calibre7"/>['(', 'set!', 'twox', '(', '*', 'x', '2', ')', ')']<br class="calibre7"/>&gt;&gt;&gt; parse(program)<br class="calibre7"/>['set!', 'twox', ['*', 'x', 2]]</b> </p>

<p class="calibre2">有許多工具可以幫忙處理 lexical analysis(像是Mike Lesk與 Eric Schmidt的<a href="http://dinosaur.compilertools.net/#lex" target="_blank">lex</a> )，但我們將會採用的是一個非常簡單的工具: Python的str.split。我們只需在小括號旁邊多加一個空格，然後呼叫 str.split，就可以獲得一串的 tokens 了。</p>

<p class="calibre2">現在輪到syntactic analysis了。我們已經看到 Lisp 的語法非常的簡單，不過有一些 Lisp 直譯器會藉由接受任意的、一個由字串所組成的list作為程式來讓syntactic analysis更簡單。換句話說，像字串(set! 1 2)會被視為是 syntactically 合法的程式，只有當直譯器執行時，才會抱怨 set! 需要它的第一個參數是一個符號才行，而不能是數字。在Java或Python中，像 1=2這樣的述句會在編譯期視為錯誤。另一方面，Java與Python不需要在編譯期偵測像是x/0 這樣的錯誤述句，所以你可以明白了吧？我們不總是會去嚴格要求一個錯誤應該在何時被找出。Lispy實作了 parse 與 read，read 程序是我們將會拿來讀取所有的表示式(數字、符號、巢狀list)。 </p>

<p class="calibre2">read 運作時會呼叫 read_from，而read_from的輸入會從tokenize而來。給定一串tokens，我們一開始會先看第一個token；如果它是一個')'，那就是一個語法錯誤。如果是一個'('，那我們就開始建立一個表示式的list直到我們遇到了')'。所有的東西都必須是符號或數字才會完成一個完整的表示式。剩下要處理的就是要知道'2'是一個整數、2.0是一個浮點數、而x是一個符號。我們會讓Python做出這個區別: 對每個不是小括號的token，先把它當作整數，然後是浮點數，最後則認為是符號。根據這些準則，我們獲得下列程式:</p>

<p class="calibre2">def read(s):<br class="calibre7"/>"Read a Scheme expression from a string."<br class="calibre7"/>return read_from(tokenize(s))</p>

<p class="calibre2">parse = read<br class="calibre7"/>def tokenize(s):<br class="calibre7"/>"Convert a string into a list of tokens."<br class="calibre7"/>return s.replace('(',' ( ').replace(')',' ) ').split()<br class="calibre7"/>def read_from(tokens):<br class="calibre7"/>"Read an expression from a sequence of tokens."<br class="calibre7"/>if len(tokens) == 0:<br class="calibre7"/>raise SyntaxError('unexpected EOF while reading')<br class="calibre7"/>    token = tokens.pop(0)<br class="calibre7"/>if '(' == token:<br class="calibre7"/>        L = []<br class="calibre7"/>while tokens[0] != ')':<br class="calibre7"/>            L.append(read_from(tokens))<br class="calibre7"/>        tokens.pop(0) # pop off ')'<br class="calibre7"/>return L<br class="calibre7"/>    elif ')' == token:<br class="calibre7"/>raise SyntaxError('unexpected )')<br class="calibre7"/>else:<br class="calibre7"/>return atom(token)<br class="calibre7"/>def atom(token):<br class="calibre7"/>"Numbers become numbers; every other token is a symbol."<br class="calibre7"/>try: return int(token)<br class="calibre7"/>except ValueError:<br class="calibre7"/>try: return float(token)<br class="calibre7"/>except ValueError:<br class="calibre7"/>return Symbol(token)</p>

<p class="calibre2">我們最後會加入一個程序，to_string，它會將表示式轉換為Lisp型式的字串，還有一個repl程序，表示read-eval-print-loop，它形成了Lisp直譯器的主體: </p>

<p class="calibre2">def to_string(exp):<br class="calibre7"/>"Convert a Python object back into a Lisp-readable string."<br class="calibre7"/>return '('+' '.join(map(to_string, exp))+')' if isa(exp, list) else str(exp)<br class="calibre7"/>def repl(prompt='lis.py&gt; '):<br class="calibre7"/>"A prompt-read-eval-print loop."<br class="calibre7"/>while True:<br class="calibre7"/>        val = eval(parse(raw_input(prompt)))<br class="calibre7"/>if val is not None: print to_string(val)</p>

<p class="calibre2">來看看它是如何工作的: </p>

<p class="calibre2">&gt;&gt;&gt; repl()<br class="calibre7"/>lis.py&gt; (define area (lambda (r) (* 3.141592653 (* r r))))<br class="calibre7"/>lis.py&gt; (area 3)<br class="calibre7"/>28.274333877<br class="calibre7"/>lis.py&gt; (define fact (lambda (n) (if (&lt;= n 1) 1 (* n (fact (- n 1))))))<br class="calibre7"/>lis.py&gt; (fact 10)<br class="calibre7"/>3628800<br class="calibre7"/>lis.py&gt; (fact 100)<br class="calibre7"/>9332621544394415268169923885626670049071596826438162146859296389521759999322991<br class="calibre7"/>5608941463976156518286253697920827223758251185210916864000000000000000000000000<br class="calibre7"/>lis.py&gt; (area (fact 10))<br class="calibre7"/>4.1369087198e+13<br class="calibre7"/>lis.py&gt; (define first car)<br class="calibre7"/>lis.py&gt; (define rest cdr)<br class="calibre7"/>lis.py&gt; (define count (lambda (item L) (if L (+ (equal? item (first L)) (count item (rest L))) 0)))<br class="calibre7"/>lis.py&gt; (count 0 (list 0 1 2 3 0 0))<br class="calibre7"/>3<br class="calibre7"/>lis.py&gt; (count (quote the) (quote (the more the merrier the bigger the better)))<br class="calibre7"/>4</p>

<p class="calibre2"><b class="calibre3">Lispy有多小/快/完整/好？</b> 我們依據下列幾點來審視Lispy:</p>

<p class="calibre2"><b class="calibre3">小</b> : Lispy非常地小: 去除註解與空行，只有90行。源代碼少於4K(我接受了Eric Cooper的建議，將class定義去除，改用lambda，使得從原本第1版的96行減為90行)。我用Java實作的Scheme，<a href="http://norvig.com/jscheme.html" target="_blank">Jscheme</a>, 最小的版本也要1664行，57K的大小。Jscheme原本叫作SILK(Scheme in Fifty Kilobytes)，但我是透過計算bytecode而不是代碼大小來維持這個底線。Lispy作的好多了，我認為它有達到Alan Kay在1972的<a href="http://www.smalltalk.org/smalltalk/TheEarlyHistoryOfSmalltalk_IV.html" target="_blank">宣示</a> : 你可以用一張紙的代碼定義出這個世界上最具威力的語言。(不過我認為Alan會不同意，因為他會將Pyhon compiler也計算進去，那就超過一張紙啦)</p>

<p class="calibre2">bash$ grep "^\s*[^#\s]" lis.py | wc<br class="calibre7"/>      90 398 3423</p>

<p class="calibre2"> <b class="calibre3">快</b> : Lispy可在0.004秒內算出(fibo 100)。這對我來說夠快了。(當然啦，比其他絕大多數的計算方式要慢的多了)<b class="calibre3">完整: </b> 相較於Scheme標準，Lispy並不完整。有幾個主要缺失: </p>

<p class="calibre2"><b class="calibre3">語法</b> : 沒有註解，quote/quasiquote 標示符、# 字面、衍生表示式形別(像衍生自 if 的 cond，或衍生自lambda的 let)，以及list。<br class="calibre7"/><b class="calibre3"><i class="calibre4">語意</i> </b> : 沒有call/cc以及tail recursion。<br class="calibre7"/><b class="calibre3"><i class="calibre4">資料型別</i> </b> : 沒有字串、字元、布林、ports、vectors、exact/inexact number。相較於我們實作的Scheme pair與list，Python的list相當接近Scheme的vector。<br class="calibre7"/><b class="calibre3"><i class="calibre4">程序</i> </b> : 沒有至少100個原生的程序: 所有沒實作的資料型別以及一些有的沒的(像是set-car!和set-cdr!，因為我們無法透過Python的list去完整實作set-cdr!)<br class="calibre7"/><b class="calibre3"><i class="calibre4">錯誤回復</i> </b> : Lispy不會去偵測並合理地回報或回復錯誤。Lispy期待程式設計師是完美的。</p>

<p class="calibre2"><b class="calibre3">好</b> : 這要由讀者來決定啦。我覺得它好的足以讓我講解Lisp 直譯器的運作了。</p>

<p class="calibre2"> <b class="calibre3"> </b> <b class="calibre3">真實的故事</b> <b class="calibre3"> </b> <b class="calibre3">為何知道直譯器是如何運作這件事是有很大幫助的呢？這邊有個小故事。回到1984年，我正在寫博士論文。那是在Latex以及Microsoft Word之前 - 我們用的是troff。不幸的是，troff沒有什麼工具可以向前參考一些符號標籤: 我想要能夠寫出"As we will see on page @theoremx"，然後在適當的地方寫下像是"@(set theoremx \n%)"的東西。(troff的暫存器\n%會記住頁數)。我的研究所同學Tony DeRose有有同樣需求，所以我們一起草擬了一個簡單的Lisp程式，它會將處理這件事作為一個前置作業。然而，當時的Lisp程式可以很好地讀取Lisp表示式，但對於不是Lisp的表示式會很慢地一次只讀一個字元，所以我們的程式並不是很好用。</b>  </p>

<p class="calibre2">從那時起，Tony和我就採取不同作法。他認為困難的部份在於直譯器如何處理表示式；他需要知道如何寫一個小的C routine將不是Lisp的字元回傳出來，然後再將其連結回Lisp程式。我不知道如何作連結，不過我認為替這個簡單的語言寫一個直譯器是很容易的事(所有要做的事就是設定變數，讀取，然後作字串串接)，所以我就用C寫了個直譯器。所以，諷刺的是，Tony寫了個Lisp程式(還有一個小的C routine)，因為他是一個C 程式設計師，而我寫了個C程式，因為我是一個Lisp程式設計師。到頭來，我們都完成了我們的工作(<a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/1985/6081.html" target="_blank">Tony</a>, <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/1987/5995.html" target="_blank">Peter</a> )。</p>

<p class="calibre2"> <b class="calibre3"> </b> <b class="calibre3">全部的東西</b> <b class="calibre3"> </b> <b class="calibre3"> </b>  為了回顧，這邊是Lispy的完整代碼(也可以從這邊下載: <a href="http://norvig.com/lis.py" target="_blank">lis.py</a> )</p>

<pre style="white-space: pre-wrap;">
<b>  1</b> ################ Lispy: Scheme Interpreter in Python
<b>  2</b> 
<b>  3</b> ## (c) Peter Norvig, 2010; See http://norvig.com/lispy.html
<b>  4</b> 
<b>  5</b> ################ Symbol, Env classes
<b>  6</b> 
<b>  7</b> from __future__ import division
<b>  8</b> 
<b>  9</b> Symbol = str
<b> 10</b> 
<b> 11</b> class Env(dict):
<b> 12</b>     &quot;An environment: a dict of {'var':val} pairs, with an outer Env.&quot;
<b> 13</b>     def __init__(self, parms=(), args=(), outer=None):
<b> 14</b>         self.update(zip(parms,args))
<b> 15</b>         self.outer = outer
<b> 16</b>     def find(self, var):
<b> 17</b>         &quot;Find the innermost Env where var appears.&quot;
<b> 18</b>         return self if var in self else self.outer.find(var)
<b> 19</b> 
<b> 20</b> def add_globals(env):
<b> 21</b>     &quot;Add some Scheme standard procedures to an environment.&quot;
<b> 22</b>     import math, operator as op
<b> 23</b>     env.update(vars(math)) # sin, sqrt, ...
<b> 24</b>     env.update(
<b> 25</b>      {'+':op.add, '-':op.sub, '*':op.mul, '/':op.div, 'not':op.not_,
<b> 26</b>       '&gt;':op.gt, '&lt;':op.lt, '&gt;=':op.ge, '&lt;=':op.le, '=':op.eq, 
<b> 27</b>       'equal?':op.eq, 'eq?':op.is_, 'length':len, 'cons':lambda x,y:[x]+y,
<b> 28</b>       'car':lambda x:x[0],'cdr':lambda x:x[1:], 'append':op.add,  
<b> 29</b>       'list':lambda *x:list(x), 'list?': lambda x:isa(x,list), 
<b> 30</b>       'null?':lambda x:x==[], 'symbol?':lambda x: isa(x, Symbol)})
<b> 31</b>     return env
<b> 32</b> 
<b> 33</b> global_env = add_globals(Env())
<b> 34</b> 
<b> 35</b> isa = isinstance
<b> 36</b> 
<b> 37</b> ################ eval
<b> 38</b> 
<b> 39</b> def eval(x, env=global_env):
<b> 40</b>     &quot;Evaluate an expression in an environment.&quot;
<b> 41</b>     if isa(x, Symbol):             # variable reference
<b> 42</b>         return env.find(x)[x]
<b> 43</b>     elif not isa(x, list):         # constant literal
<b> 44</b>         return x                
<b> 45</b>     elif x[0] == 'quote':          # (quote exp)
<b> 46</b>         (_, exp) = x
<b> 47</b>         return exp
<b> 48</b>     elif x[0] == 'if':             # (if test conseq alt)
<b> 49</b>         (_, test, conseq, alt) = x
<b> 50</b>         return eval((conseq if eval(test, env) else alt), env)
<b> 51</b>     elif x[0] == 'set!':           # (set! var exp)
<b> 52</b>         (_, var, exp) = x
<b> 53</b>         env.find(var)[var] = eval(exp, env)
<b> 54</b>     elif x[0] == 'define':         # (define var exp)
<b> 55</b>         (_, var, exp) = x
<b> 56</b>         env[var] = eval(exp, env)
<b> 57</b>     elif x[0] == 'lambda':         # (lambda (var*) exp)
<b> 58</b>         (_, vars, exp) = x
<b> 59</b>         return lambda *args: eval(exp, Env(vars, args, env))
<b> 60</b>     elif x[0] == 'begin':          # (begin exp*)
<b> 61</b>         for exp in x[1:]:
<b> 62</b>             val = eval(exp, env)
<b> 63</b>         return val
<b> 64</b>     else:                          # (proc exp*)
<b> 65</b>         exps = [eval(exp, env) for exp in x]
<b> 66</b>         proc = exps.pop(0)
<b> 67</b>         return proc(*exps)
<b> 68</b> 
<b> 69</b> ################ parse, read, and user interaction
<b> 70</b> 
<b> 71</b> def read(s):
<b> 72</b>     &quot;Read a Scheme expression from a string.&quot;
<b> 73</b>     return read_from(tokenize(s))
<b> 74</b> 
<b> 75</b> parse = read
<b> 76</b> 
<b> 77</b> def tokenize(s):
<b> 78</b>     &quot;Convert a string into a list of tokens.&quot;
<b> 79</b>     return s.replace('(',' ( ').replace(')',' ) ').split()
<b> 80</b> 
<b> 81</b> def read_from(tokens):
<b> 82</b>     &quot;Read an expression from a sequence of tokens.&quot;
<b> 83</b>     if len(tokens) == 0:
<b> 84</b>         raise SyntaxError('unexpected EOF while reading')
<b> 85</b>     token = tokens.pop(0)
<b> 86</b>     if '(' == token:
<b> 87</b>         L = []
<b> 88</b>         while tokens[0] != ')':
<b> 89</b>             L.append(read_from(tokens))
<b> 90</b>         tokens.pop(0) # pop off ')'
<b> 91</b>         return L
<b> 92</b>     elif ')' == token:
<b> 93</b>         raise SyntaxError('unexpected )')
<b> 94</b>     else:
<b> 95</b>         return atom(token)
<b> 96</b> 
<b> 97</b> def atom(token):
<b> 98</b>     &quot;Numbers become numbers; every other token is a symbol.&quot;
<b> 99</b>     try: return int(token)
<b>100</b>     except ValueError:
<b>101</b>         try: return float(token)
<b>102</b>         except ValueError:
<b>103</b>             return Symbol(token)
<b>104</b> 
<b>105</b> def to_string(exp):
<b>106</b>     &quot;Convert a Python object back into a Lisp-readable string.&quot;
<b>107</b>     return '('+' '.join(map(to_string, exp))+')' if isa(exp, list) else str(exp)
<b>108</b> 
<b>109</b> def repl(prompt='lis.py&gt; '):
<b>110</b>     &quot;A prompt-read-eval-print loop.&quot;
<b>111</b>     while True:
<b>112</b>         val = eval(parse(raw_input(prompt)))
<b>113</b>         if val is not None: print to_string(val)
</pre>

</body>
</html>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" href="../styles/dotepub.css" type="text/css" />
  <title>Dotepub.com</title>
</head>

<body>
<p>
(It's actually a PE)
</p><p>
After much effort I finally managed to write (probably not) the first self-contained executable image native to both Linux and Windows... sort of.
</p><p>
Basically, the concept behind a dual-os binary is that you can encapsulate an executable image for one OS inside of the executable image of another in such a way that both images can be executed under their respective OS's without any problems.
</p><p>
Because the Windows PE image format allows for an (utterly useless, except in this one specific slightly illegitimate case) DOS stub of 57 or so bytes, which the loader doesn't care for, following the 'MZ' signature, it grants us the ability to use that space to hide the executable headers for a completely different executable image. It just so happens that the header size for a 32-bit ELF executable is 52 bytes, so can't we just overwrite the dos stub with our ELF header and put the rest of the ELF image after the PE image?
No. Because, very simply, the Windows loader requires the two bytes at the very beginning of every image to be 'MZ' (what a fun time we would have if it didn't)- so unless ELF images have a magic value of 'MZ' (which they don't) we can't just overwrite the stub.
</p><p>
What we can do, however, is trick the command interpreter on linux into thinking that the executable is a shell-script, and run commands that will unpack, relocate or whatever is needed to get the linux image portion of the file to execute. Genius right?
</p>
	<div class="" id="">; gay.asm<br /><span class="filler"></span>; nasm gay.asm -o gay.exe<br /><span class="filler"></span>; chmod a+x gay.exe or whatever<br /><span class="filler"></span>[bits 32]<p>WANTLOAD equ 0x00400000</p><p>db "MZ 2&gt;/dev/null;A=`mktemp`;B='/dev/null'",10,0x27<br /><span class="filler"></span>times 0x3c - ($ - $$) db 0x0<br /><span class="filler"></span>dd 0x40</p><p>dd 'PE' ; Magic<br /><span class="filler"></span>dw 0x14c ; Machine (i386)<br /><span class="filler"></span>dw 2 ; NumberOfSections<br /><span class="filler"></span>dd 1366668610,0,0 ; TimeDateStamp,PtrToSymbolTable,NumberOfSymbols<br /><span class="filler"></span>dw opthdrsz ; SizeOfOptionalHeader<br /><span class="filler"></span>dw 0x103 ; Characteristics (no reloc, executable, 32bit)</p><p>opthdr:<br /><span class="filler"></span>dw 0x10B ; OptMagic<br /><span class="filler"></span>db 8,0 ; LinkerVersion<br /><span class="filler"></span>dd wincodesz ; SizeOfCode<br /><span class="filler"></span>dd datasz ; SizeOfInitializedData<br /><span class="filler"></span>dd 0 ; SizeOfUninitializedData<br /><span class="filler"></span>dd wincode ; AddressOfEntryPoint (RVA)<br /><span class="filler"></span>dd wincode ; BaseOfCode (RVA)<br /><span class="filler"></span>dd data ; BaseOfData (RVA)<br /><span class="filler"></span>dd WANTLOAD ; ImgBase<br /><span class="filler"></span>dd 1 ; SectionAlignment<br /><span class="filler"></span>dd 1 ; FileAlignment<br /><span class="filler"></span>dw 4,0 ; OsVersion<br /><span class="filler"></span>dw 0,0 ; ImgVersion<br /><span class="filler"></span>dw 4,0 ; SubsystemVersion<br /><span class="filler"></span>dd 0 ; Win32VersionValue<br /><span class="filler"></span>dd imagesz ; SizeOfImage<br /><span class="filler"></span>dd winhdrsz ; SizeOfHeaders<br /><span class="filler"></span>dd 0 ; Checksum<br /><span class="filler"></span>dw 2 ; Subsystem (GUI)<br /><span class="filler"></span>dw 0x400 ; DllCharacteristics<br /><span class="filler"></span>dd 0x100000 ; SizeOfStackReserve<br /><span class="filler"></span>dd 0x1000 ; SizeOfStackCommit<br /><span class="filler"></span>dd 0x100000 ; SizeOfHeapReserve<br /><span class="filler"></span>dd 0x1000 ; SizeOfHeapCommit<br /><span class="filler"></span>dd 0 ; LdrFlags<br /><span class="filler"></span>dd 16 ; NumberOfRvaAndSizes</p><p>dd 0,0 ; Export Table<br /><span class="filler"></span>dd idata,idatasz ; Import Table<br /><span class="filler"></span>times 14 dd 0,0</p><p>opthdrsz equ $ - opthdr</p><p>db '.text',0,0,0 ; Name<br /><span class="filler"></span>dd wincodesz ; VirtualSize<br /><span class="filler"></span>dd wincode ; VirtualAddress<br /><span class="filler"></span>dd wincodesz ; SizeOfRawData<br /><span class="filler"></span>dd wincode ; PointerToRawData<br /><span class="filler"></span>dd 0,0,0 ; Bullshit (ptrreloc,linnum,[relocnum,linnum])<br /><span class="filler"></span>dd 0x60000020 ; Characteristics (exec, read, code)</p><p>db '.idata',0,0 ; Name<br /><span class="filler"></span>dd idatasz ; VirtualSize<br /><span class="filler"></span>dd idata ; VirtualAddress<br /><span class="filler"></span>dd idatasz ; SizeOfRawData<br /><span class="filler"></span>dd idata ; PointerToRawData<br /><span class="filler"></span>dd 0,0,0 ; Bullshit (ptrreloc,linnum,[relocnum,linnum])<br /><span class="filler"></span>dd 0xC0000040 ; Characteristics (read, write, data)</p><p>db '.data',0,0 ; Name<br /><span class="filler"></span>dd datasz ; VirtualSize<br /><span class="filler"></span>dd data ; VirtualAddress<br /><span class="filler"></span>dd datasz ; SizeOfRawData<br /><span class="filler"></span>dd data ; PointerToRawData<br /><span class="filler"></span>dd 0,0,0 ; Bullshit (ptrreloc,linnum,[relocnum,linnum])<br /><span class="filler"></span>dd 0xC0000040 ; Characteristics (read, write, data)</p><p>winhdrsz:</p><p>wincode:<br /><span class="filler"></span>push 0<br /><span class="filler"></span>push caption + WANTLOAD<br /><span class="filler"></span>push message + WANTLOAD<br /><span class="filler"></span>push 0<br /><span class="filler"></span>call [MessageBoxA + WANTLOAD]</p><p>&nbsp; &nbsp; xor eax, eax<br /><span class="filler"></span>ret<br /><span class="filler"></span>wincodesz equ $ - wincode</p><p>data:<br /><span class="filler"></span>message: db 'Windows is gay'<br /><span class="filler"></span>caption: db 0<br /><span class="filler"></span>datasz equ $ - data</p><p>idata:<br /><span class="filler"></span>; ILT(RVA), TimeDateStamp, ForwarderChain, DllName(RVA), IAT(RVA)<br /><span class="filler"></span>dd 0,0,0,msvcrt,msvcrt_table<br /><span class="filler"></span>dd 0,0,0,0,0</p><p>msvcrt:<br /><span class="filler"></span>db 'USER32.DLL',0</p><p>msvcrt_table:<br /><span class="filler"></span>MessageBoxA: dd _MessageBoxA<br /><span class="filler"></span>dd 0</p><p>_MessageBoxA: dw 0<br /><span class="filler"></span>db 'MessageBoxA',0<br /><span class="filler"></span>idatasz equ $ - idata</p><p>imagesz:<br /><span class="filler"></span>db 0x27,' 2&gt;$B;dd if=$0 of=$A bs=1 skip=618 2&gt;$B;chmod a+x $A;$A;C=$?;rm $A;exit $C',10</p><p>linux:<br /><span class="filler"></span>db 0x7f,'ELF',1,1,1,0,0,0,0,0,0,0,0,0 ; e_ident<br /><span class="filler"></span>dw 2 ; e_type<br /><span class="filler"></span>dw 3 ; e_machine<br /><span class="filler"></span>dd 1 ; e_version<br /><span class="filler"></span>dd WANTLOAD + lincode - linux; e_entry<br /><span class="filler"></span>dd elf_phdr - linux; e_phoff<br /><span class="filler"></span>dd elf_shdr - linux; e_shoff<br /><span class="filler"></span>dd 0 ; e_flags<br /><span class="filler"></span>dw 52 ; e_ehsize</p><p>dw 32 ; e_phentsize<br /><span class="filler"></span>dw 1 ; e_phnum</p><p>dw 40 ; e_shentsize<br /><span class="filler"></span>dw 2 ; e_shnum<br /><span class="filler"></span>dw 0 ; e_shstrndx</p><p>elf_phdr:<br /><span class="filler"></span>dd 1 ; p_type<br /><span class="filler"></span>dd 0 ; p_offset<br /><span class="filler"></span>dd WANTLOAD ; p_vaddr<br /><span class="filler"></span>dd WANTLOAD ; p_paddr<br /><span class="filler"></span>dd linuxsz ; p_filesz<br /><span class="filler"></span>dd linuxsz ; p_memsz<br /><span class="filler"></span>dd 7 ; p_flags<br /><span class="filler"></span>dd 0 ; p_align</p><p>elf_shdr:<br /><span class="filler"></span>dd 0 ; sh_name<br /><span class="filler"></span>dd 0 ; sh_type<br /><span class="filler"></span>dd 0 ; sh_flags<br /><span class="filler"></span>dd 0 ; sh_addr<br /><span class="filler"></span>dd 0 ; sh_offset<br /><span class="filler"></span>dd 0 ; sh_size<br /><span class="filler"></span>dd 0 ; sh_link<br /><span class="filler"></span>dd 0 ; sh_info<br /><span class="filler"></span>dd 0 ; sh_addralign<br /><span class="filler"></span>dd 0 ; sh_entsize</p><p>dd 0 ; sh_name<br /><span class="filler"></span>dd 1 ; sh_type<br /><span class="filler"></span>dd 7 ; sh_flags<br /><span class="filler"></span>dd WANTLOAD + lincode - linux; sh_addr<br /><span class="filler"></span>dd lincode - linux; sh_offset<br /><span class="filler"></span>dd lincodesz ; sh_size<br /><span class="filler"></span>dd 0 ; sh_link<br /><span class="filler"></span>dd 0 ; sh_info<br /><span class="filler"></span>dd 0 ; sh_addralign<br /><span class="filler"></span>dd 0 ; sh_entsize</p><p>lincode:<br /><span class="filler"></span>mov eax, 4<br /><span class="filler"></span>mov ebx, 1<br /><span class="filler"></span>mov ecx, WANTLOAD + string - linux<br /><span class="filler"></span>mov edx, 13<br /><span class="filler"></span>int 0x80</p><p>&nbsp; &nbsp; mov eax, 1<br /><span class="filler"></span>xor ebx, ebx<br /><span class="filler"></span>int 0x80</p></div>
<pre>
string: db 'Linux is gay',10
lincodesz equ $ - lincode
linuxsz equ $ - linux
</pre>
<p>
Messy, I know (and make sure there are no stray single quotes in the windows image!). The linux portion works by using shell commands to extract the linux portion of the image to /tmp, running the image and then removing it (while saving the exit code, and I had to make everything look nice too). The Windows portion works without strings attached.
</p><p>
The code contains 32-bit images for both Linux and Windows, and one should have no issues executing it once assembled. Keep in mind that you may need to change skip=# on line 109 if you edit the Windows portion of the binary image (or anything before line 109) as the number of bytes into the file where you will find the linux image will change.
</p><p>
Logically the next step is to write a virus, or rather, merge a windows and linux virus, for fun and profit.
</p><p>
pls respond. Thank you!
</p>
</body>
</html>

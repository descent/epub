<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" href="../styles/dotepub.css" type="text/css" />
  <title>Dotepub.com</title>
</head>

<body>

        <p>Follow @LinuxUserMag</p>
<p>
<b>
Work began on the Hurd, the true kernel of the GNU operating system,
in May 1991, but it has yet to materialise (. (使)物質化, (使)具體化, (使)追求物質利益, (使)顯形, 成為事實, 實現) as a production-ready kernel. Richard Hillesley tells the story…
</b>
</p>

        <figure>
<img style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" height="300" width="270" src="../img/gnu-meditate.png" title="The GNU"/>
        <figcaption>The GNU</figcaption></figure>
	<!--gnu-meditate--><!--Michael_Tiemann--><!--OS-structure-->
        <p>Although the GNU operating system was first conceived (1 懷孕, 懷胎; 2 構想, 構思) in 1983 and the Free Software Foundation (FSF) had first declared an interest in using the Mach microkernel as the core of the GNU operating system kernel as far back as 1987, the sources of the Mach microkernel – developed at Carnegie Mellon University (CMU) – weren’t released under a suitable licence until 1991, by which time Linus Torvalds had begun his project to write a UNIX-like kernel for the IBM 386.</p><p>If the Linux kernel hadn’t been written when it was, licensed under the GPLv2 and surrounded by components of
        the GNU operating system, or Linux hadn’t captured the moment (片刻, 瞬間, 重要, 階段, 力矩) and the imagination (想像) of developers, the energy that gathered around Linux might have gone to the Hurd and the world might have been a different place. But it wasn’t just the rise of Linux, or the choice of the Mach microkernel that slowed the progress of the Hurd.</p>

<p>The design of the Hurd was an attempt (嘗試, 企圖) to embody
(具體表達, 使具體化)the spirit (精神, 心靈, 靈魂, 態度, 志氣, 人格,
情緒, 心情, 烈酒) and promise (諾言, 約定的事情, 有指望) of the free software
movement (運動) in code. As one anonymous hacker employee of the FSF back in the early days of the Hurd project, put it: "The sentiment
(感情, 感傷, 情操, 情緒, 感想, 意見) around the design was, I think it fair
(公平地, 正面地, 有教養地, 清楚地) to say, somewhat giddy ((使)眼花, (使)眩暈).
The free software movement was (and is) all about freeing users from
subjugation (征服, 鎮壓, 平息) to those who provide software. The Hurd’s microkernel architecture and the structure of the daemons
(『希臘神話』精靈) would securely (安全地, 牢靠地, 無疑的) free users from subjugation to system administrators – each user could securely invoke a set of daemons to create the operating environment he or she wished, no special permissions required."</p>


        <h3>A slightly (些微地, 苗條地) large closet (秘密; 隱私, (讀書, 禱告用的) 隱密的小室)</h3>
        <p>Richard Stallman had announced his intention (意圖, 目的) to
write a complete UNIX-like operating system to be known as GNU,
"GNU’s Not Unix!", in September 1983. The years between 1983 and the inception
(起頭, 開使, 開端) of the Hurd were spent writing the operating system and tools that made the development of a kernel possible, the editors and compilers, Bash, Make, Autoconf, Emacs, GCC, sed, gawk and the command-line tools.</p><p>GNU paid for itself through (穿越, 從頭至尾, 到底, 因為, 藉由, 透過) the sale of the software. In the early days of the Hurd the FSF employed developers, before "any kind of data over voice or particularly (特別, 格外, 尤其, 詳細地)
high bandwidth connection was commonplace (常事,老生常談,普通的東西) –
so that hacking was over modem connected to text terminal. Mostly we hacked in a shared office which, if you saw it, you’d think ‘Wow, that’s a slightly large closet.’ We were, at that time, guests of MIT."</p>
<p>Linus Torvalds had announced the arrival (出生, 新生兒, 抵達; 達到, 出現) of "a (free) operating system (just a hobby (愛好), won’t be big and professional like GNU) for 386(486) AT clones" on comp.os.minix just a few short months after work began on the Hurd. Torvalds’ choice of a monolithic kernel was not the choice of the purists (純化論者), but provided the quickest route to a working kernel.</p>

<p>The appeal (吸引力; 引起興趣, 懇求; 哀求) of the Linux kernel to the hackers, hobbyists (業餘愛好者) and academics (學院的, 學術的) who swarmed
(分群, 群集, 聚集一塊) to help in its development was that it was free software, available under GPLv2, and ran on the kind of hardware they had at home. The
momentum (動力, 動量) was with Linux and the community grew surprisingly
(使人驚奇) fast. The community made GNU/ Linux what it was, and while work continued on GNU Hurd, it was at a slower pace (速度, 步調). The community wasn’t coming its way.</p>
<h3>An idealistic (理想主義的, 唯心論的, 唯心主義的, 唯心主義者的) philosophy
(哲學, 人生觀, 哲學思想)</h3>
<p>From a user perspective ((觀察問題的)視角, 看法), the Hurd was going to be
a long time coming (來臨), and the Linux developers had slotted (開狹槽於...)
Linux into the space that was meant to be occupied by the Hurd at the heart of the GNU operating system. Stallman was initially (最初) sceptical
(a. 懷疑論的, 懷疑的). Early versions of Linux were exclusive
(排外的, 獨佔的, 唯一的) to the IBM 386, and according to Stallman: 
"We heard that Linux was not at all portable (this may not be true today,
but that’s what we heard then). And we heard that Linux was architecturally on a par (常規; 標準; 常態) with the UNIX kernel; our work was leading to something much more powerful."</p>
<p>Linux was dependent on GCC and the GNU tools, and its profile
(側面,輪廓,人物素描) began to grow as distributions emerged (浮現, 形成, 出現, (事實)顯露), and the FSF began to see Linux as an acceptable, if sub-optimal and temporary, substitute for the kernel at the heart of the GNU operating system. As Stallman was quick to point out: "There is no operating system called Linux. The OS called Linux is GNU. Linux is a program – a kernel. A kernel is one part of an OS, the lowest-level program in the OS that keeps track of other programs running, and apportions (分配, 分攤, 分派) memory and processor time among them."</p>
<p>He insisted (堅持, 堅決主張, 強調) that the GNU operating system with Linux at its heart should be
known as GNU/Linux so that "people understand that the system exists
because of an idealistic philosophy. Call it Linux and it defeats
(擊敗; 打敗, 失敗; 敗北, 破壞; 阻撓) the philosophy. It’s a very serious problem. Linux is not the system. Linux is one piece of it… The idealistic vision of the GNU project is the reason we have this system."</p>
<p>Work continued on the Hurd but it became obvious (明顯的, 明白的, 顯然的)
that the FSF had chosen a difficult route in its search for perfection. The microkernel presented a series of problems to overcome (戰勝, 克服, 勝過),
and people who might have participated (參加, 分享) had been diverted (轉移)
to work on Linux, which was usable and (bearing fruit) (結果,取得成果,奏效).
Despite (雖然, 盡管) the criticisms (批評, 評論) of the likes (愛好的事物) of
Andy Tanenbaum at the outset of the Linux project, Torvalds’ choice of a
monolithic kernel for Linux made it easier to arrive at a working free operating system.</p>
<p>Stallman later admitted (被承認了的, 公認的), "I take full responsibility for the technical decision to develop the GNU kernel based on Mach, a decision which seems to have been responsible for the slowness of the development.
I thought using Mach would speed the work by saving us a large part of the job, but I was wrong." In latter years the Hurd has been ported to a variety of microkernels, from L4 to Coyotos and to Viengoos, but has never had the community and resources that went the way of Linux.</p>

<h3>The principle (原則, 原理) and the promise (諾言, 約定的事情, 有指望)</h3>
        <figure>
<img style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;" height="350" width="270" src="../img/Michael_Tiemann.png" title="Michael Tiemann founded Cygnus Solutions and was a GCC developer. Cygnus and Tiemann encouraged the ECGS breakway from GCC and was a co-founder of the OSI"/>
<figcaption>Michael Tiemann founded (建立, 創立) Cygnus Solutions and was a GCC developer. Cygnus and Tiemann encouraged the ECGS breakway from GCC and was a co-founder of the OSI</figcaption></figure> 
<p>In the late Nineties (九十, 九十個) there was a schism ['sizm] (分裂, 分立) in the community,
symbolised (象征, 代表, 作為...的象征) by the ECGS (pronounced ‘eggs’) split of GCC – as an attempt to 
break GCC development (away from) (離開,遠離) the FSF – and the founding of the Open Source Initiative
(主動行動, 首創精神, 主動權) (OSI), to promote a less stringent (迫切的, 嚴厲的, 銀根緊的),
or watered down, view of the possibilities of free software.</p>
<p>"The main differentiation [the OSI] sought (seek 的過去式和過去分詞) from the FSF is that they would not condemn (譴責; 非難) proprietary (所有者的, 所有權的, 私有的) software or describe themselves as a freedom movement – they sought to emphasise the economic advantages of having volunteers (志願者)
do work for no pay." But in the view of some "their main purpose upon founding was to attempt to 
politically (政治上;賢明地) marginalise (= marginalize, 忽視, 排斥) RMS
(a project in which they’ve had some success)."</p>
<p>An appearance (出現, 露面, 外觀, 外表, 出版) of the Hurd was first promised (允諾, 約定, 預示) in 1994, when Emacs was said to be up and running, and a release was promised in 2001, but never materialised.
After the port to the L4 microkernel in 2005, Markus Brinkmann was promising 
"we can now easily explore (探勘; 探險) and develop the system in any way we want," but was
forced (強迫) to admit (承認, 接受) that "with my glibc port, I can already build simple applications,
but most won’t run because they need a file system or other gimmicks (暗機關) (like, uhm, fork and exec), and I only have stubs (dummy functions which always return an error) for that now."</p>
<p>In the mid-Nineties Debian arrived on the scene (情景, 現場) and through the ‘Debian Guidelines’,
written by Bruce Perens, became the practical (實際的, 現實的, 實用性的) expression and conscience (良心)
of the free software movement, while the FSF divested (使擺脫, 使脫去, 奪去) itself of much of its role in defining and developing the GNU operating system and put its efforts into the politics of free software.</p><p>Since 1998, Debian GNU/Hurd has been an active project of the Debian community, who offer an installation CD and live CD, which can be seen as the sanctioned (制定制裁規則, 認可, 核準, 同意)
version of the current status of Hurd development, but is still not considered to be an ‘official’ Debian release. The Hurd is not up to production quality, and has some limitations on hardware support, but can be usefully run in a virtual box and is worth a try.</p><p>Where once the FSF paid developers to work on GNU projects, most are now volunteers or employees of companies paid to work on projects like GCC. Much of the focus went out of the Hurd because Linux does the job, and there was no burning need for another kernel, but the principle ( 原則, 原理, 主義) and the promise have lingered (逗留, 消磨, 徘徊) on,
and there may yet be scope for a return to the original vision of the GNU Hurd.</p>
<h3>Alix – The True GNU Kernel</h3><p>Richard Stallman tells the story that the GNU kernel was not originally supposed to be called the Hurd.</p><p>"Its original name was Alix – named after the woman who was my
sweetheart (心上人, 愛人) at the time. She, a UNIX system administrator, had pointed out how her name would fit a common naming pattern for UNIX system versions; as a joke, she told her friends,
'Someone should name a kernel after me.' I said nothing, but decided to surprise her with a kernel named Alix."</p><p>"It did not stay that way. Michael (now Thomas) Bushnell, the main developer of the kernel, preferred the name Hurd, and redefined Alix to refer to a certain part of the kernel – the part that would trap system calls and handle them by sending messages to Hurd servers."</p>
<p>"Later, Alix and I (broke up) (打碎, 破碎, 分裂), and she changed her name; independently
(獨立地,自立地), the Hurd design was changed so that the C library would send messages directly to servers, and this made the Alix component disappear from the design."</p><p>"But before these things happened, a friend of hers (came across) (偶遇) the name Alix in the Hurd source code and mentioned it to her. So she did have the chance to find a kernel named after her."</p>
<p>Bushnell chose the name Hurd, partly because the Hurd suggested a herd (獸群, 人群; 使成群) of GNU,
and partly because the Hurd was a recursive acronym (字首組合詞) for ‘Hird of Unix-Replacing Daemons’ and a Hird was a ‘Hurd of Interfaces Representing Depth’. As Bushnell put it "We have here, to my knowledge, the first software to be named by a pair of mutually (互相地, 互助) recursive acronyms."</p>
<p>Thomas Bushnell is still a Debian developer and a Gregorian (格里高利教會的) friar (修道士).</p>
        <h3>At the bleeding (沉痛的, 悲慟的; 同情的) edge</h3> 
        <figure>
<img width="500" src="../img/OS-structure.png"/>
        <figcaption>A microkernel puts system processes into userland. "Programs are required to communicate only with a few essential parts of the kernel..."</figcaption>
        </figure>

        <p>Unlike the Linux kernel, which is monolithic, the Hurd uses a microkernel, and functionality is moved out of kernel space and into userland. The microkernel sits between the hardware and most of the activities that are normally assumed by a monolithic kernel.</p><p>Thomas Bushnell, one of the primary architects of the Hurd in its earlier days, summarised the theory in his paper ‘Towards a New Strategy of OS design’, written in 1996. "The GNU Hurd," he wrote, "is designed to make the area of system code as limited as possible. Programs are required to communicate only with a few essential parts of the kernel; the rest of the system is replaceable dynamically. Users can use whatever parts of the remainder of the system they want, and can easily add components themselves for other users to take advantage of. No mutual trust need exist in advance for users to use each other’s services, nor does the system become vulnerable by trusting the services of arbitrary users." In practice, this means that users do not defer to the superuser for activities like mounting a file system or loading a device driver, which was the case with Linux until recent years, since when Linux has begun to accumulate microkernel-like features of its own.</p><p>"It was well understood back then," an anonymous GNU employee remembered, "and even a point of discussion in academia, that a microkernel architecture posed some difficult problems for performance (related mostly to a greater number of context switches as messages pass between daemons rather than syscalls being handled by a monolithic kernel). Rashid’s work [at Carnegie Mellon] had suggested that this problem was not so terribly significant after all. And so, at least to me, it felt like the GNU project was not only doing this shoestring-budget freedom- fighting hacking, but also leading near the bleeding edge of CS research made practical. Well, that was the theory, anyway, and we were mighty proud of ourselves and generally excited to be there."</p><p>The Hurd was a remarkable adventure into the state of the art of operating system theory as it existed at that time. The objective of GNU was to achieve something both UNIX-like and something akin to the operating system of a Lisp machine, the original single-user workstation that had grown out of the hacker culture of the AI Lab at MIT, where Stallman had learnt his craft. "Emacs (with its Lisp extensibility) was taken to be a paradigm for how interactive programs might work. Originally, it was even envisioned that the window system would be Lisp based.</p><p>"One early change to the original GNU vision occurred when it became clear that X11 worked pretty well and was here to stay and would be free software. As a practical matter: just use that."</p><h3>The might have beens</h3><p>When GNU was first conceived, the obvious solution was to find a ready-made kernel that was already in the public domain.</p><p>Stallman’s first choice was TRIX, which had been developed on his home ground at MIT, and is mentioned in the GNU Manifesto. "An initial kernel exists but many more features are needed to emulate UNIX," he wrote in 1984. "When the kernel and compiler are finished, it will be possible to distribute a GNU system suitable for program development." As late as December 1986, the GNU developers were "working on the changes needed to TRIX", and it wasn’t until the following year that Stallman began to take an interest in Mach.</p><p>Other ideas were mooted, including the use of Berkeley’s Sprite operating system and the BSD kernel. "RMS was a very strong believer, wrongly, I think, in a very greedy algorithm approach to code reuse issues," Thomas Bushnell later remembered.</p><p>"My first choice was to take the BSD 4.4-Lite release and make a kernel. I knew the code, I knew how to do it. It is now perfectly obvious to me that this would have succeeded splendidly and the world would be a very different place today. RMS wanted to work together with people from Berkeley on such an effort. Some of them were interested, but some seem to have been deliberately dragging their feet: and the reason now seems to be that they had the goal of spinning off BSDI. A GNU based on 4.4-Lite would undercut BSDI."</p><p>As Bushnell describes it, Stallman came to the conclusion that "Mach is a working kernel. 4.4-Lite is only partial. We will go with Mach."</p><p>Follow @LinuxUserMag</p>

</body>
</html>

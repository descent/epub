<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>http://www.grabmybooks.com</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../page_styles.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
<h2 class="calibre1">Implementing a Thread Library on Linux (evanjones.ca)</h2>
<p class="calibre2"><b class="calibre3">[ 2003-December-10 11:12 ]</b></p>

<p class="calibre2">
When a program is executed on a computer, it is executed a line at a time, which each line containing a command to execute, or directions about which piece of code to execute next. Sometimes, this is not sufficient. There are many programs which must be able to do many things at once. For example, a GUI application must repaint the display and respond to user input while doing any processing, and web servers must be able to send information to hundreds of clients simultaneously. This is the problem that threads try to solve. Threads allow multiple parts of a program to run at the same time. All modern operating systems supply some sort of thread library, such as standard Posix threads. However, I was curious about how threads actually work. So armed with a little bit of knowledge about C and the Linux kernel, I went out to build my own thread library.</p>

<p class="calibre2">
在程序在運行的時候，通常都是只有一條主線的，有些時候，這是效率不高的。有很多程序必須要能同時做很多工作。比如說，GUI程序必須在處理程序邏輯的同時重畫界面，響應用戶輸入。Web服務器必須同時向成百上千的客戶發送信息。線程可以解決這些難題。所有的現代操作系統都提供線程庫，比如標準Posix線程。特別是，我對線程的工作原理十分好奇，所以在學習了一些C和Linux內核的知識後，我開始建立自己的線程庫。
</p>

<p class="calibre2"><b class="calibre3">Multitasking</b></p>

<p class="calibre2">
In traditional operating systems, there are two tools for multitasking provided by the operating system. The first is a process, and the second is a thread.</p>

<p class="calibre2">
在傳統的操作系統中，提供了實現多任務的兩種工具，一種是進程，一種是線程。
</p>

<p class="calibre2"><b class="calibre3">Processes</b></p>

<p class="calibre2">Each program is a seperate process. The operating system shares computing resources between all the processes that are running. It also keeps each process seperate, preventing one process from modifing another process's resources. However, it is quite common that many processes can belong to a single program. For example, the <a href="http://www.evanjones.ca/software/threading.html#fig1" target="_blank">Figure 1</a> shows some of the processes currently running on my Linux system, and there are four processes executing mozilla-bin . In this case, one process will need to communicate with another. This is facilitated through operating system routines for inter-process communication (IPC), such as signals (<a href="http://www.evanjones.ca/software/../man/2-signal.html" target="_blank">signal </a> ), shared memory (<a href="http://www.evanjones.ca/software/../man/2-shmop.html" target="_blank">shmop </a> ), and pipes (<a href="http://www.evanjones.ca/software/../man/2-pipe.html" target="_blank">pipe </a> ). </p>

<p class="calibre2">
每個程序都是獨立的進程。操作系統在所有進程間分配資源，並且為了防止一個進程修改其他進程的資源，進程間是彼此完全獨立的。但是，多個進程配合完成一項任務也是很常見的。比如說，圖1展示了我的Linux系統下同時進行的進程，其中有4個進程執行mozilla-bin。在這種情況下，進程間需要相互通信，因此操作系統提供了進程間通信(IPC)的工具，比如有信號，共享內存和管道。
</p>

<table border="1" class="calibre4"> <tr class="row"> <td class="calibre5">Process ID</td> <td class="calibre5">Command</td> </tr> <tr class="row"> <td class="calibre5">1</td> <td class="calibre5">init</td> </tr> <tr class="row"> <td class="calibre5">142</td> <td class="calibre5">/sbin/syslogd</td> </tr> <tr class="row"> <td class="calibre5">183</td> <td class="calibre5">/usr/bin/X11/X</td> </tr> <tr class="row"> <td class="calibre5">266</td> <td class="calibre5">esd</td> </tr> <tr class="row"> <td class="calibre5">270</td> <td class="calibre5">sawfish</td> </tr> <tr class="row"> <td class="calibre5">275</td> <td class="calibre5">panel</td> </tr> <tr class="row"> <td class="calibre5">277</td> <td class="calibre5">gmc</td> </tr> <tr class="row"> <td class="calibre5">279</td> <td class="calibre5">gnome-terminal</td> </tr> <tr class="row"> <td class="calibre5">291</td> <td class="calibre5">bash</td> </tr> <tr class="row"> <td class="calibre5">319</td> <td class="calibre5">/usr/bin/mozilla-bin</td> </tr> <tr class="row"> <td class="calibre5">341</td> <td class="calibre5">/usr/bin/scite</td> </tr> <tr class="row"> <td class="calibre5">344</td> <td class="calibre5">/usr/bin/mozilla-bin</td> </tr> <tr class="row"> <td class="calibre5">345</td> <td class="calibre5">/usr/bin/mozilla-bin</td> </tr> <tr class="row"> <td class="calibre5">346</td> <td class="calibre5">/usr/bin/mozilla-bin</td> </tr> <tr class="row"> <td class="calibre5">2568</td> <td class="calibre5">ps</td> </tr> </table>

<p class="calibre2"><b class="calibre3">Figure 1: Linux System Process List</b></p>

<p class="calibre2"><b class="calibre3">Threads</b></p>

<p class="calibre2">Inter-process communication is simple and easy to use when it is used occasionally. However, if there are many processes and many resources to be shared between them, the model quickly becomes cumbersome. Threads were created to make this sort of resource sharing simple and efficient. The concept is that a single process can have a number of threads, and everything is shared between them except the execution context (the stack and CPU registers). This way, if a shared resource is modified in one thread, the change is visible in all other threads. The disadvantage is that care must be taken to avoid problems where two threads try to access a shared resource at the same time.</p>

<p class="calibre2"><b class="calibre3">Kernel Threads</b></p>

<p class="calibre2">Modern operating systems directly support threads in the kernel, which means that the scheduling of which process is supposed to run is done by the operating system. Kernel threads allow the operating system to schedule different threads to run on different processors in multiprocessor computers, which can be an enormous performance increase. The disadvantage of kernel threads is that each time the operating system switches between threads, a context switch, there is a penalty due to the overhead of saving and restoring the state of the threads. Therefore, many simultaneous threads will be slower than a single thread which distributes its time between different tasks. This is the reason that single threaded web servers, like <a href="http://www.acme.com/software/thttpd/" target="_blank">thttpd</a> , perform better than multi-threaded web servers, like <a href="http://www.apache.org/" target="_blank">Apache</a> . The <a href="http://www.dre.vanderbilt.edu/JAWS/research.html" target="_blank">JAWS research project</a> has an excellent analysis of the performance of various multitasking approaches with respect to web servers.</p>

<p class="calibre2"><b class="calibre3">User Space Threads</b></p>

<p class="calibre2">Threads can also be built in user space. This means that a library or program is responsable for scheduling and executing threads. When this is done in user space, there is still a penalty for a context switch. However, the cost is less than an operating system context switch. Sometimes, user space threads are called fibers, to suggest that they are "lighter" than kernel threads. For the remainder of this article, I will refer to user space threads as fibers, and kernel threads as threads. Fibers have an additional advantage over kernel threads: Only one thread can modify a shared resource at a time, since only one fiber can be executing at a time. This means that some of the locks required for threads may not be needed. However, care is still required. As mentioned in " <a href="http://research.microsoft.com/%7Eadya/pubs/usenix2002-fibers.pdf" target="_blank">Cooperative Task Management</a> ", a 2002 USENIX paper, "Cooperative task management [user space threads] avoids the concurrency problems of locks only if tasks can complete without having to yield control to any other task." Fibers also cannot take advantage of multiprocessor systems. The author of GNU Pth, Ralf Engelschall, has an excellent paper about his work <a href="http://www.engelschall.com/pw/usenix/2000/pmt-html/" target="_blank">implementing user space threads</a> , which covers the differences between different threading models in detail.</p>

<p class="calibre2"><b class="calibre3">A Basic Thread Library</b></p>

<p class="calibre2">To play around with these concepts, a basic C thread library, <a href="http://www.evanjones.ca/software/libfiber.tar.gz" target="_blank">libfiber</a> , was written. It is implemented using two techniques for fibers and Linux kernel threads. This library provides an extremely simple implementation for creating, destroying and scheduling fibers or threads. It should only be used as an example for learning about how threads are implemented, since there are many issues with signals and synchronization. For real applications there are more polished libraries such as <a href="http://www-128.ibm.com/developerworks/linux/library/l-posix1.html" target="_blank">pthreads</a> for kernel threads or <a href="http://www.gnu.org/software/pth/" target="_blank">GNU Portable Threads (Pth)</a> for user space threads.</p>

<h3>
libfiber interface
</h3>

<dl>
<dt>void initFibers();</dt>

<dd>Initializes the internal structures inside the library. Should
be called before using any library routines.</dd>

<dt>int spawnFiber( void (*func)(void) );</dt>

<dd>Creates a new thread which will execute the given function.
Returns zero on success, or nonzero on error.</dd>

<dt>void fiberYield();</dt>

<dd>Yield execution control to another fiber. This simply calls <a href="../man/2-sched_yield.html"><code>sched_yield</code></a> in
the kernel thread implementation.</dd>

<dt>void waitForAllFibers();</dt>

<dd>Waits for all the fibers to exit, and frees resources
associated with each one. If called from a child fiber in the user
space implementations, it will return once all other fibers have
exited. If called from a child fiber in the kernel implementation,
it will return immediately. Returns zero on success, or nonzero on
error.</dd>
</dl>

<p class="calibre2"><a href="http://www.evanjones.ca/software/threading.html#fig2" target="_blank">Figure 2</a> shows the main function from the sample application included with the library. It creates three fibers executing different functions, waits until they have all completed, then returns.</p>

<pre style="white-space: pre-wrap;">
<b> 1</b> int main()
<b> 2</b> {
<b> 3</b>   // Initialize the fiber library
<b> 4</b>   initFibers();
<b> 5</b>  
<b> 6</b>   // Go fibers!
<b> 7</b>   spawnFiber( &amp;fiber1 );
<b> 8</b>   spawnFiber( &amp;fibonacchi );
<b> 9</b>   spawnFiber( &amp;squares );
<b>10</b> 
<b>11</b>   // Since these are not preemptive, we must allow them to run
<b>12</b>   waitForAllFibers();
<b>13</b>  
<b>14</b>   // The program quits
<b>15</b>   return 0;
<b>16</b> }
</pre>


<p class="calibre2"><b class="calibre3">Figure 2: Example program using the fiber library</b></p>

<p class="calibre2"><b class="calibre3">Implementing Kernel Threads on Linux</b></p>

<p class="calibre2">Linux takes a unique approach to threads. On Linux, threads and processes are treated the same. They are both considered to be tasks. The difference is that threads share the same memory space, file mappings and (in general) signal handlers. There is an excellent post from Linus Torvalds to the <a href="http://www.tux.org/lkml/" target="_blank">Linux Kernel Mailing List</a> that explains the <a href="http://www.evanjones.ca/software/threading-linus-msg.html" target="_blank">advantages of this implementation</a> . This means that in the process list in <a href="http://www.evanjones.ca/software/threading.html#fig1" target="_blank">Figure 1</a> , the processes may actually be threads. For example, the four mozilla-bin processes are actually threads inside a single process.</p>

<p class="calibre2">
Linux使用一個特殊的方法實現線程。在Linux上，進程和線程在本質上是一樣的，它們都被認為是任務。唯一的區別是現成共享內存空間，文件描述符和信號處理程序(通常情況下)。在Linux Kernel Mailing List上，Linus Torvalds發過一個經典的帖子來闡述這種實現方式的優點。
在Linux上，內核線程可以通過系統調用clone來創建。這個系統調用跟fork相似，都是創建一個任務。只不過clone可以指定共享哪些資源。在創建線程時，我們可以共享儘可能多的資源：內存空間，文件描述符和信號處理函數。當線程退出，發出SIGCHLD信號時，wait將會返回。
第一個挑戰是為線程分配棧空間。在libfier中使用的是最簡單的方法，即使用malloc在堆中分配棧空間。這意味著必須要估計一個棧的最大值。如果棧在使用時超出了最大值，會引起內存衝突。在bb_threads中，是使用mprotect在棧底創建一個barrier，這樣在棧溢出的時候會引發段錯誤。最好的方法是Linux pthreads的實現，是使用mmap來分配內存，這樣的話，內存隨需隨分配，如果系統不能分配另外的內存，將會產生segmentation violation。
傳遞給clone的棧指針必須指向棧頂，因為在多數處理器中，棧是向下生長的。為了避免內存洩露，線程退出時必須釋放棧空間。Libfiber庫使用wait等待線程退出，然後使用free釋放棧空間。圖3顯示了創建線程的例子。請通過libfiber-clone.c查看完整的實現。如果想瞭解Linux pthread如何實現創建線程，請看 "<a href="http://www.linux-mag.com/id/792/">The Fibers of Threads</a>"。
</p>

<p class="calibre2">On Linux, kernel threads are created with the <a href="http://www.evanjones.ca/software/../man/2-clone.html" target="_blank">clone </a> system call. This system call is similar to <a href="http://www.evanjones.ca/software/../man/2-fork.html" target="_blank">fork </a> in that it creates a task which is executing the current program. However it differs in that <a href="http://www.evanjones.ca/software/../man/2-clone.html" target="_blank">clone </a> specifies which resources should be shared. To create a thread, we call <a href="http://www.evanjones.ca/software/../man/2-clone.html" target="_blank">clone </a> to create a task which shares as much as possible: The memory space, file descriptors and signal handlers. The signal to be sent when the thread exists is SIGCHLD so <a href="http://www.evanjones.ca/software/../man/2-wait.html" target="_blank">wait </a> will return when a thread exits.</p>

<p class="calibre2">The first challenge is allocating a stack for the thread. The simplest solution, used in libfiber, is allocating the stack on the heap using <a href="http://www.evanjones.ca/software/../man/3-malloc.html" target="_blank">malloc </a> . This means that an estimate of the maximum stack size must be made. If the stack grows larger, memory corruption will occur. A solution used by <a href="http://www.evanjones.ca/software/ftp://caliban.physics.utoronto.ca/pub/linux/bb_threads.tar.gz" target="_blank">bb_threads</a> , is to create a barrier at the bottom of the stack with <a href="http://www.evanjones.ca/software/../man/2-mprotect.html" target="_blank">mprotect </a> . This way, the thread will cause a segmentation fault when it overflows the stack. The best solution, used by the Linux pthreads implementation, is to use <a href="http://www.evanjones.ca/software/../man/2-mmap.html" target="_blank">mmap </a> to allocate memory, with flags specifying a region of memory which is allocated as it is used. This way, memory is allocated for the stack as it is needed, and a segmentation violation will occur if the system is unable to allocate additional memory.</p>

<p class="calibre2">The stack pointer passed to <a href="http://www.evanjones.ca/software/../man/2-clone.html" target="_blank">clone </a> must reference the top of the chunk of memory, since on most processors the stack grows down. This is done by adding the size of the region to the pointer returned by <a href="http://www.evanjones.ca/software/../man/3-malloc.html" target="_blank">malloc </a> . To avoid a memory leak, the stack must be freed once the thread has exited. The libfiber library waits for threads to exit using <a href="http://www.evanjones.ca/software/../man/2-wait.html" target="_blank">wait </a> , then frees the stack using <a href="http://www.evanjones.ca/software/../man/3-free.html" target="_blank">free </a> . <a href="http://www.evanjones.ca/software/threading.html#fig3" target="_blank">Figure 3</a> shows an example of creating a thread. See libfiber-clone.c in the <a href="http://www.evanjones.ca/software/libfiber.tar.gz" target="_blank">libfiber package</a> for the full implementation. For details about how Linux's pthread implementation creates threads, see "<a href="http://www.linux-mag.com/2001-05/compile_01.html" target="_blank">The Fibers of Threads</a> " from Linux Magazine.</p>

<p class="calibre2">#include &lt;malloc.h&gt;<br class="calibre6"/>#include &lt;sys/types.h&gt;<br class="calibre6"/>#include &lt;sys/wait.h&gt;<br class="calibre6"/>#include &lt;signal.h&gt;<br class="calibre6"/>#include &lt;sched.h&gt;<br class="calibre6"/>#include &lt;stdio.h&gt;</p>

<p class="calibre2">// 64kB stack<br class="calibre6"/>#define FIBER_STACK 1024*64</p>

<p class="calibre2">// The child thread will execute this function<br class="calibre6"/>int threadFunction( void* argument )<br class="calibre6"/>{<br class="calibre6"/>printf( "child thread exiting\n" );<br class="calibre6"/>return 0;<br class="calibre6"/>}</p>

<p class="calibre2">int main()<br class="calibre6"/>{<br class="calibre6"/>void* stack;<br class="calibre6"/>pid_t pid;</p>

<p class="calibre2">// Allocate the stack<br class="calibre6"/>stack = malloc( FIBER_STACK );<br class="calibre6"/>if ( stack == 0 )<br class="calibre6"/>{<br class="calibre6"/>perror( "malloc: could not allocate stack" );<br class="calibre6"/>exit( 1 );<br class="calibre6"/>}</p>

<p class="calibre2">printf( "Creating child thread\n" );</p>

<p class="calibre2">// Call the clone system call to create the child thread<br class="calibre6"/>pid = clone( &amp;threadFunction, (char*) stack + FIBER_STACK,<br class="calibre6"/>SIGCHLD | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_VM, 0 );<br class="calibre6"/>if ( pid == -1 )<br class="calibre6"/>{<br class="calibre6"/>perror( "clone" );<br class="calibre6"/>exit( 2 );<br class="calibre6"/>}</p>

<p class="calibre2">// Wait for the child thread to exit<br class="calibre6"/>pid = waitpid( pid, 0, 0 );<br class="calibre6"/>if ( pid == -1 )<br class="calibre6"/>{<br class="calibre6"/>perror( "waitpid" );<br class="calibre6"/>exit( 3 );<br class="calibre6"/>}</p>

<p class="calibre2">// Free the stack<br class="calibre6"/>free( stack );</p>

<p class="calibre2">printf( "Child thread returned and stack freed.\n" );</p>

<p class="calibre2">return 0;<br class="calibre6"/>} </p>

<p class="calibre2"><b class="calibre3">Figure 3: Simple clone Thread Example</b></p>

<p class="calibre2"><b class="calibre3">Implementing Fibers Using makecontext</b></p>

<p class="calibre2">Modern Unix systems include library functions for manipulating the execution context, contained in ucontext.h . These functions are <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/getcontext.html" target="_blank">getcontext </a> , <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/getcontext.html" target="_blank">setcontext </a> , <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/makecontext.html" target="_blank">swapcontext </a> and <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/makecontext.html" target="_blank">makecontext </a> . Essentially, <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/getcontext.html" target="_blank">getcontext </a> saves the current execution context, <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/setcontext.html" target="_blank">setcontext </a> switches to the specified execution context, <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/swapcontext.html" target="_blank">swapcontext </a> will save the current context and switch to another and <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/makecontext.html" target="_blank">makecontext </a> creates a new execution context. To create a new fiber, we call <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/getcontext.html" target="_blank">getcontext </a> to retrieve the current context then modify the members of the ucontext_t struct to specify the new context. Again, we must allocate a new stack, but this time the library takes care of the direction of the stack growth. Then we call <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/makecontext.html" target="_blank">makecontext </a> and specify the function and arguments to execute in the fiber.</p>

<p class="calibre2">The remaining challenge is that in this implementation, the fibers must explicitly yield control to allow other fibers to run. The <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/swapcontext.html" target="_blank">swapcontext </a> function can be used to stop executing one fiber and continue executing another. <a href="http://www.evanjones.ca/software/threading.html#fig4" target="_blank">Figure 4</a> shows a simple program which creates a child fiber and switches between the child and the parent. See libfiber-uc.c in the <a href="http://www.evanjones.ca/software/libfiber.tar.gz" target="_blank">libfiber package</a> for the full implementation.</p>

<p class="calibre2">#include &lt;malloc.h&gt;<br class="calibre6"/>#include &lt;ucontext.h&gt;<br class="calibre6"/>#include &lt;stdio.h&gt;</p>

<p class="calibre2">// 64kB stack<br class="calibre6"/>#define FIBER_STACK 1024*64</p>

<p class="calibre2">ucontext_t child, parent;</p>

<p class="calibre2">// The child thread will execute this function<br class="calibre6"/>void threadFunction()<br class="calibre6"/>{<br class="calibre6"/>printf( "Child fiber yielding to parent" );<br class="calibre6"/>swapcontext( &amp;child, &amp;parent );<br class="calibre6"/>printf( "Child thread exiting\n" );<br class="calibre6"/>swapcontext( &amp;child, &amp;parent );<br class="calibre6"/>}</p>

<p class="calibre2">int main()<br class="calibre6"/>{<br class="calibre6"/>// Get the current execution context<br class="calibre6"/>getcontext( &amp;child );</p>

<p class="calibre2">// Modify the context to a new stack<br class="calibre6"/>child.uc_link = 0;<br class="calibre6"/>child.uc_stack.ss_sp = malloc( FIBER_STACK );<br class="calibre6"/>child.uc_stack.ss_size = FIBER_STACK;<br class="calibre6"/>child.uc_stack.ss_flags = 0; <br class="calibre6"/>if ( child.uc_stack.ss_sp == 0 )<br class="calibre6"/>{<br class="calibre6"/>perror( "malloc: Could not allocate stack" );<br class="calibre6"/>exit( 1 );<br class="calibre6"/>}</p>

<p class="calibre2">// Create the new context<br class="calibre6"/>printf( "Creating child fiber\n" );<br class="calibre6"/>makecontext( &amp;child, &amp;threadFunction, 0 );</p>

<p class="calibre2">// Execute the child context<br class="calibre6"/>printf( "Switching to child fiber\n" );<br class="calibre6"/>swapcontext( &amp;parent, &amp;child );<br class="calibre6"/>printf( "Switching to child fiber again\n" );<br class="calibre6"/>swapcontext( &amp;parent, &amp;child );</p>

<p class="calibre2">// Free the stack<br class="calibre6"/>free( child.uc_stack.ss_sp );</p>

<p class="calibre2">printf( "Child fiber returned and stack freed\n" );</p>

<p class="calibre2">return 0;<br class="calibre6"/>} </p>

<p class="calibre2"><b class="calibre3">Figure 4: Simple makecontext Fiber Example</b></p>

<h3>Implementing Fibers Using longjmp</h3>

<p class="calibre2">ANSI C provides functions for saving and restoring
the execution context for graceful error handling.
<a href="http://www.evanjones.ca/software/../man/3-setjmp.html" target="_blank">setjmp </a> 
saves the current execution context, 
and <a href="http://www.evanjones.ca/software/../man/3-longjmp.html" target="_blank">longjmp </a> 
returns to a previously saved context. The one new challenge to implementing fibers with these functions is that they do not provide a way to create a new stack. They simply restore a previous stack frame. To create the stack, we use sigaltstack to allocate an alternate stack for the signal handler, set up a signal handler, then call it on the new stack using <a href="http://www.evanjones.ca/software/../man/3-raise.html" target="_blank">raise </a> . The signal handler saves its current state hen returns to get rid of the "signal handler context". Finally, the fiber is ready to run. <a href="http://www.evanjones.ca/software/threading.html#fig5" target="_blank">Figure 5</a> shows a minimal program that uses this technique to set up an alternate stack. See libfiber-clone.c in the <a href="http://www.evanjones.ca/software/libfiber.tar.gz" target="_blank">libfiber package</a> for the full implementation. This technique is used by <a href="http://www.gnu.org/software/pth/" target="_blank">GNU Pth</a> to implement fibers in a very portable fashion.</p>

<pre style="white-space: pre-wrap;">
<b> 1</b> #include &lt;malloc.h&gt;
<b> 2</b> #include &lt;setjmp.h&gt;
<b> 3</b> #include &lt;signal.h&gt;
<b> 4</b> #include &lt;stdio.h&gt;
<b> 5</b> 
<b> 6</b> // 64kB stack
<b> 7</b> #define FIBER_STACK 1024*64
<b> 8</b> 
<b> 9</b> jmp_buf child, parent;
<b>10</b> 
<b>11</b> // The child thread will execute this function
<b>12</b> void threadFunction()
<b>13</b> {
<b>14</b>   printf( &quot;Child fiber yielding to parent\n&quot; );
<b>15</b>   if ( setjmp( child ) )
<b>16</b>   {
<b>17</b>     printf( &quot;Child thread exiting\n&quot; );
<b>18</b>     longjmp( parent, 1 );
<b>19</b>   }
<b>20</b> 
<b>21</b>   longjmp( parent, 1 );
<b>22</b> }
<b>23</b> 
<b>24</b> void signalHandler( int arg )
<b>25</b> {
<b>26</b>   if ( setjmp( child ) )
<b>27</b>   {
<b>28</b>     threadFunction();
<b>29</b>   }
<b>30</b>  
<b>31</b>   return;
<b>32</b> }
<b>33</b> 
<b>34</b> int main()
<b>35</b> {
<b>36</b>   stack_t stack;
<b>37</b>   struct sigaction sa;
<b>38</b>  
<b>39</b>   // Create the new stack
<b>40</b>   stack.ss_flags = 0;
<b>41</b>   stack.ss_size = FIBER_STACK;
<b>42</b>   stack.ss_sp = malloc( FIBER_STACK );
<b>43</b>   if ( stack.ss_sp == 0 )
<b>44</b>   {
<b>45</b>     perror( &quot;malloc: Could not allocate stack.&quot; );
<b>46</b>     exit( 1 );
<b>47</b>   }
<b>48</b>   sigaltstack( &amp;stack, 0 );
<b>49</b>  
<b>50</b>   // Set up the custom signal handler
<b>51</b>   sa.sa_handler = &amp;signalHandler;
<b>52</b>   sa.sa_flags = SA_ONSTACK;
<b>53</b>   sigemptyset( &amp;sa.sa_mask );
<b>54</b>   sigaction( SIGUSR1, &amp;sa, 0 );
<b>55</b>  
<b>56</b>   // Send the signal to call the function on the new stack
<b>57</b>   printf( &quot;Creating child fiber\n&quot; );
<b>58</b>   raise( SIGUSR1 );
<b>59</b>  
<b>60</b>   // Execute the child context
<b>61</b>   printf( &quot;Switching to child fiber\n&quot; );
<b>62</b>   if ( setjmp( parent ) )
<b>63</b>   {
<b>64</b>     printf( &quot;Switching to child fiber again\n&quot; );
<b>65</b>     if ( setjmp( parent ) == 0 ) longjmp( child, 1 );
<b>66</b>   }
<b>67</b>   else longjmp( child, 1 );
<b>68</b>  
<b>69</b>   // Free the stack
<b>70</b>   free( stack.ss_sp );
<b>71</b>   printf( &quot;Child fiber returned and stack freed\n&quot; );
<b>72</b>   return 0;
<b>73</b> }
</pre>
<p class="calibre2"><b class="calibre3">Figure 5: Simple longjmp Fiber Example</b></p>

<h3>
Conclusion
</h3>

<p class="calibre2">The implementation of libfiber can be examined to understand how threads and fibers are created by libraries which provide them. This can be useful when analyzing the performance impact of various multiprocessing techniques. The library was developed and tested on Linux, however, the fiber implementations should be portable across most Unix platforms. The thread implementation, on the other hand, is Linux specific, due to the <a href="http://www.evanjones.ca/software/../man/2-clone.html" target="_blank">clone </a> system call.</p>

<p class="calibre2">
實現一個簡單的線程庫libfiber可以讓我們更好的理解線程庫是如何實現線程的，當我們在分析不同多線程工具的時候，上面的這些經驗就會派上用場。本線程庫是在Linux開發並測試的，但是真正的線程庫應該是可以移植到Unix平台上的，從這點上來說，本線程庫實現的內核線程是Linux專有的，因為它是利用clone系統調用來實現的。
</p>

<p class="calibre2"><b class="calibre3">Resources</b></p>

<p class="calibre2"><a href="http://www-128.ibm.com/developerworks/linux/library/l-posix1.html" target="_blank">Pthreads Tutorial Part 1</a> , <a href="http://www-128.ibm.com/developerworks/linux/library/l-posix2/" target="_blank">Part 2</a> , <a href="http://www-128.ibm.com/developerworks/linux/library/l-posix3/" target="_blank">Part 3</a> - How to use the pthreads library<br class="calibre6"/><a href="http://pauillac.inria.fr/%7Exleroy/linuxthreads/faq.html" target="_blank">LinuxThreads FAQ</a> - Frequently asked questions about Linux's pthread implementation<br class="calibre6"/><a href="http://www.linux-mag.com/2001-05/compile_01.html" target="_blank">The Fibers of Threads</a> - An article explaining how Linux's pthread library is implemented<br class="calibre6"/><a href="http://www.evanjones.ca/software/ftp://caliban.physics.utoronto.ca/pub/linux/bb_threads.tar.gz" target="_blank">Bare-bones threads</a> [<a href="http://www.evanjones.ca/software/bb_threads.tar.gz" target="_blank">local mirror</a> ] - A simple Linux thread library that uses clone and provides mutexes<br class="calibre6"/><a href="http://www.gnu.org/software/pth/" target="_blank">GNU Portable Threads (Pth)</a> - User space thread library for nearly any platform imaginable<br class="calibre6"/><a href="http://www.engelschall.com/pw/usenix/2000/pmt-html/" target="_blank">Portable Multithreading</a> - A excellent paper describing how to create user space threads<br class="calibre6"/><a href="http://www.tux.org/lkml/" target="_blank">Linux Kernel Mailing List</a> - The definitive resource for Linux operating system discussions, and development.<br class="calibre6"/><a href="http://kt.zork.net/kernel-traffic/" target="_blank">Kernel Traffic</a> - A summary of the activity on the Linux Kernel Mailing List<br class="calibre6"/><a href="http://www.dre.vanderbilt.edu/JAWS/research.html" target="_blank">JAWS: Understanding High Performance Web Systems</a> - The performance implications of processes, threads and fibers<br class="calibre6"/><a href="http://research.microsoft.com/%7Eadya/pubs/usenix2002-fibers.pdf" target="_blank">Cooperative Task Management</a> - A 2002 USENIX paper from Microsoft that describes the software engineering advantages and disadvantages of different concurrency models in great detail.</p>

<p class="calibre2"><b class="calibre3">Comments </b></p>

<p class="calibre2">The following are responses to questions about this document, some of which resulted in some changes.</p>

<p class="calibre2">2002-10-21: <a href="http://www.evanjones.ca/software/threading-20021021-locking.html" target="_blank">Re: About locking in multi-threaded environments</a> 2002-10-21: <a href="http://www.evanjones.ca/software/threading-20021021-parameters.html" target="_blank">Re: thread library [passing multiple parameters to new threads]</a> </p>

<p class="calibre2"><b class="calibre3">Revision History</b></p>

<p class="calibre2"><a href="http://www.evanjones.ca/software/threading.html#2003-12-10" target="_blank">2003-12-10</a> : Whoops. Fixed another IBM thread link.<br class="calibre6"/><a href="http://www.evanjones.ca/software/threading.html#2003-02-20" target="_blank">2003-02-20</a> : IBM's Posix Threads tutorial has moved. I've also linked to all three parts.<br class="calibre6"/><a href="http://www.evanjones.ca/software/threading.html#2002-10-24" target="_blank">2002-10-24</a> : Clarified the language in the section discussing the need for locks with user space threads. Concurrency errors can occur with user space threads. However, code between two calls to yield() (or functions that in turn call yield) will always execute atomically from the perspective of the program. One sentence was modified to use softer language as follows: This means that many some of the locks required for threads are not may not be needed. A reference was added to the Microsoft Research paper on <a href="http://research.microsoft.com/%7Eadya/pubs/usenix2002-fibers.pdf" target="_blank">Cooperative Task Management</a> , which has a good quote on this subject and is a good paper on this subject in general.<br class="calibre6"/><a href="http://www.evanjones.ca/software/threading.html#2002-10-24-2" target="_blank">2002-10-24</a> : Added a comments section with responses to questions about this document.</p>
</body>
</html>

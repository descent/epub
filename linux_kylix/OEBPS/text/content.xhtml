<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Dotepub.com</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" type="text/css" rel="stylesheet"/>
<link href="../../page_styles.css" type="text/css" rel="stylesheet"/>
</head>
  <body class="calibre6">
	<div class="calibre7" id=""><p class="calibre8">
(LinuxWorld) -- I've heard comments the past year or two about anti-Linux
sentiment (情緒) on the part of some members of the Borland developer community involved with Delphi and Kylix. It certainly would not be a surprise for friction
(摩擦) to occur when Windows and Linux developers are confined (限制)
in close quarters (寓所, 營房, 住處). Now a recent post on a Borland community
message board by Danny Thorpe, a well-known Borland engineer who has been involved with the Kylix project from the beginning, has stirred (攪動 (液體以使冷卻, 混合) ) the pot ((陶製, 金屬製, 玻璃製的) 各式容器). Thorpe, rightly or wrongly, criticized (批評, 分析; 評估) both Linux and open source in explaining why Kylix wasn't working exactly as intended at library load time.</p>

<pre class="calibre6">

感謝 PeterWolf:

stir the pot 有點像我們講的「引戰」. :)
或是在兩方 (多方) 之間放火的那種行為。
「攪動一池春水」

</pre>


<p class="calibre8">Kylix is Borland's version of Delphi for Linux. It's a rapid application development tool. To the extent possible, they want Kylix and Delphi to be identical -- in the eyes of the developers at least -- even though Windows and Linux are most certainly not. That's a worthy goal, and one that allows Delphi programmers to port their Windows applications to Linux with a minimum of <em class="calibre9">#ifdef</em>'s and bother. But it is not an easy one.</p>

<p class="calibre8">Thorpe voiced (表達, 吐露, 調音) his displeasure (不愉快, 生氣, 不滿) with both the
Linux library loader and the open source community in his post.

<p class="nl"></p>

See Resources for a link:
<ul>
<li><a href="http://edn.embarcadero.com/article/27847">Problem: Linux Libraries Can't Fail</a> </li>
<li><a href="http://edn.embarcadero.com/article/21171"> Is Linux Ready for Delphi?</a> </li>
</ul>
Thorpe's message
struck (strike 的過去式和過去分詞 打, 撞擊, 衝擊) me as simply being wrong-headed (head 朝特定方向行進). For one thing, his complaints about a "bug" and the open source community's lack of concern (關心, 憂慮) sound more
like whining (whine 哀訴) and excuses (原諒, 申辯, 做為...的託辭) for a problem in Kylix. For another,
his remarks (評論, 注意) don't build community, they polarize ((使)偏振, (使)極化, (使)兩極分化) communities.</p>

<p class="calibre8">Thorpe's first complaint is that the loader doesn't report return codes reflecting
the results of library initialization to the calling program. Borland didn't know that when they wrote Kylix. They assumed that it did. Now that they have found out that loader Linux uses behaves differently than Windows does, they pronounce it a bug.</p><p class="calibre8">Not being familiar with the code in question, I decided to ask some open source/free software luminaties (typo?? maybe luminary) their opinions on the issue. Is Thorpe's complaint really a bug in the loader. Is the loader working as it is supposed to work? I also asked for suggestions for alternatives.
Thorpe posited (假設, 安置, 布置) that Borland's only option is to wait and hope that some day the open source maintainers make it happen. Here is what they had to say.</p><h4 class="calibre10">Is it a bug or a feature (request)?</h4><p class="calibre8">Bruce Perens points out to Thorpe, "That you might figure out if this particular form of error checking is required by the ELF standard, or any other standard that applies to the linker. If it's not part of a standard, this is a feature-request rather than a bug."</p><p class="calibre8">In a later message, Perens said the loader used by Linux behaves exactly the same as the loader he used when developing on an SGI 3D machine, meaning that it is a Unix thing, not a Linux thing.</p>

<p class="calibre8">Miguel de Icaza seconds (當...助手, 支持) that when he notes "Loading a shared object in Linux is very flexible, but I am afraid (害怕的, 恐怕的, 遺憾的) the people from Borland are not aware of how this is done on Unix. In Unix, you have to establish your own convention on 'plugins', this convention is something that each application establishes."</p><p class="calibre8">Eric Raymond said, "Part of it may be that Thorpe still thinks in (Borland) Pascal. In C, libraries don't self-initialize -- that is, we call library initialization routines explicitly at runtime rather than implicitly at library load-time."</p><h4 class="calibre10">What to do, what to do</h4><p class="calibre8">Let's look at alternatives. Thorpe didn't find any except to wait for the maintainers. What did those who have been "in country" a little longer have to suggest? Let's take a look.</p><p class="calibre8">Gordon Matzigkeit of the GNU LD development team asks, "I'm wondering what the functional difference is between what Borland wants, and checking a status flag after each <em class="calibre9">dlopen</em>, doing <em class="calibre9">dlclose</em> when the flag says there was a failure."</p><p class="calibre8">Perens suggests the use of a different loader for Kylix. He even explains how to do it, and do it without having to change any existing code:</p><blockquote class="calibre11">If you run "ldd" on any executable, it will say "/lib/ld-linux.so.2" or something similar, which is name of the loader it will use. So, you actually can install a second loader, say "/lib/ld-linux-borland-so.2 , without making a change to executable formats, etc., just build your executables with the flags to the linker that ask for your version of the loader. And since you have Open Source, you can start hacking on the present loader source to make your version.</blockquote><p class="calibre8">de Icaza agrees with the notion of an alternate loader, and he even provides example code:</p>

        <blockquote class="calibre11">So for example, he could implement what he wants by saying 'The convention is that initialization function returns true on success, false on failure,' like this:
<pre class="calibre12">
int library_init()
{
  if (init())
    return TRUE;
  else
    return FALSE;
}

From his loader, he can do:

typedef int (*library_init_ptr)()

...

library_init_ptr = dlsym (shlib_handle, "library_init");
if (library_init_ptr != null)
{
  if (!(*library_init_ptr)() )
    shutdown ();
  else 
    ok.
}
</pre></blockquote>
<p class="calibre8">Torvalds joins the concensus in suggesting a separate loader for Kylix, notes that is exactly what XFree86 does (though for different reasons), and then adds another alternative for good measure, "Or they could use the standard loader, and have a separate out-of-band error message handler: The dynamic library can export the error code as any other function it exports."</p><h4 class="calibre10">What Borland wants</h4><p class="calibre8">Thorpe explained his post on the Borland community site by saying "I don't honestly expect any change to occur in the Linux loader. The article was posted to the Borland Community site to inform Borland Kylix developers how to deal with the world as it is."</p><p class="calibre8">Borland found some bugs in gcc in the development of Kylix, submitted patches, and has seen them incorporated into the current version. Borland knows how open-source is supposed to work. Thorpe's whine and wait approach will probably not bring the results Borland wants. Especially since the results Borland wants could have fairly serious consequences for the other users of the loader.</p><p class="calibre8">In a final post to Thorpe on the message board, Perens notes that implementing the change requested would cause other problems including a loss of optimization, a requirement for special cases for static versus dynamic executables, and the need for tracking which libraries are instantiated. He concludes "The end result would essentially duplicate the functionality of the C++ static constructors and destructors, which don't present the issues I mention above."</p><p class="calibre8">To my mind, it comes down to this. Borland -- or at least Thorpe -- does not want to invest further time and money in Kylix in order to develop their own loader. That's fine. These are tough times for many. If that is the case, they should just say so. Blaming open source is not the solution.</p><p class="calibre8">As Linus Torvalds said "Might <em class="calibre9">dlopen()</em> be improved? Possibly. It won't get improved by him whining about it though. And there are tons of <em class="calibre9">obvious</em> ways to handle it, which makes him a <em class="calibre9">stupid</em> whiner too."</p></div>
</body>
</html>
